<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PicoXLSX</name>
    </assembly>
    <members>
        <member name="T:PicoXLSX.Cell">
            <summary>
            Class representing a cell of a worksheet
            </summary>
        </member>
        <member name="T:PicoXLSX.Cell.CellType">
            <summary>
            Enum defines the basic data types of a cell
            </summary>
        </member>
        <member name="F:PicoXLSX.Cell.CellType.STRING">
            <summary>Type for single characters and strings</summary>
        </member>
        <member name="F:PicoXLSX.Cell.CellType.NUMBER">
            <summary>Type for all numeric types (long, integer and float and double)</summary>
        </member>
        <member name="F:PicoXLSX.Cell.CellType.DATE">
            <summary>Type for dates and times (Note: Dates before 1900-01-01 are not allowed)</summary>
        </member>
        <member name="F:PicoXLSX.Cell.CellType.BOOL">
            <summary>Type for boolean</summary>
        </member>
        <member name="F:PicoXLSX.Cell.CellType.FORMULA">
            <summary>Type for Formulas (The cell will be handled differently)</summary>
        </member>
        <member name="F:PicoXLSX.Cell.CellType.EMPTY">
            <summary>Type for empty cells. This type is only used for merged cells (all cells except the first of the cell range)</summary>
        </member>
        <member name="F:PicoXLSX.Cell.CellType.DEFAULT">
            <summary>Default Type, not specified</summary>
        </member>
        <member name="T:PicoXLSX.Cell.AddressType">
            <summary>
            Enum for the referencing style of the address
            </summary>
        </member>
        <member name="F:PicoXLSX.Cell.AddressType.Default">
            <summary>Default behavior (e.g. 'C3')</summary>
        </member>
        <member name="F:PicoXLSX.Cell.AddressType.FixedRow">
            <summary>Row of the address is fixed (e.g. 'C$3')</summary>
        </member>
        <member name="F:PicoXLSX.Cell.AddressType.FixedColumn">
            <summary>Column of the address is fixed (e.g. '$C3')</summary>
        </member>
        <member name="F:PicoXLSX.Cell.AddressType.FixedRowAndColumn">
            <summary>Row and column of the address is fixed (e.g. '$C$3')</summary>
        </member>
        <member name="P:PicoXLSX.Cell.CellAddress">
            <summary>
            Gets or sets the combined cell Address as string in the format A1 - XFD1048576
            </summary>
        </member>
        <member name="P:PicoXLSX.Cell.CellAddress2">
            <summary>Gets or sets the combined cell Address as Address object</summary>
        </member>
        <member name="P:PicoXLSX.Cell.CellStyle">
            <summary>
            Gets the assigned style of the cell
            </summary>
        </member>
        <member name="P:PicoXLSX.Cell.ColumnNumber">
            <summary>Gets or sets the number of the column (zero-based)</summary>  
            <exception cref="T:PicoXLSX.RangeException">Throws a RangeException if the column number is out of range</exception>
        </member>
        <member name="P:PicoXLSX.Cell.DataType">
            <summary>Gets or sets the type of the cell</summary>
        </member>
        <member name="P:PicoXLSX.Cell.RowNumber">
            <summary>Gets or sets the number of the row (zero-based)</summary>
            <exception cref="T:PicoXLSX.RangeException">Throws a RangeException if the row number is out of range</exception>
        </member>
        <member name="P:PicoXLSX.Cell.Value">
            <summary>Gets or sets the value of the cell (generic object type)</summary>
        </member>
        <member name="P:PicoXLSX.Cell.WorksheetReference">
            <summary>
            Gets or sets the parent worksheet reference
            </summary>
        </member>
        <member name="M:PicoXLSX.Cell.#ctor">
            <summary>Default constructor. Cells created with this constructor do not have a link to a worksheet initially</summary>
        </member>
        <member name="M:PicoXLSX.Cell.#ctor(System.Object,PicoXLSX.Cell.CellType)">
            <summary>
            Constructor with value and cell type. Cells created with this constructor do not have a link to a worksheet initially
            </summary>
            <param name="value">Value of the cell</param>
            <param name="type">Type of the cell</param>
        </member>
        <member name="M:PicoXLSX.Cell.#ctor(System.Object,PicoXLSX.Cell.CellType,System.String)">
            <summary>
            Constructor with value, cell type and address. The worksheet reference is set to null and must be assigned later
            </summary>
            <param name="value">Value of the cell</param>
            <param name="type">Type of the cell</param>
            <param name="address">Address of the cell</param>
        </member>
        <member name="M:PicoXLSX.Cell.#ctor(System.Object,PicoXLSX.Cell.CellType,System.Int32,System.Int32,PicoXLSX.Worksheet)">
            <summary>
            Constructor with value, cell type, row number, column number and the link to a worksheet
            </summary>
            <param name="value">Value of the cell</param>
            <param name="type">Type of the cell</param>
            <param name="column">Column number of the cell (zero-based)</param>
            <param name="row">Row number of the cell (zero-based)</param>
            <param name="reference">Referenced worksheet which contains the cell</param>
        </member>
        <member name="M:PicoXLSX.Cell.CompareTo(PicoXLSX.Cell)">
            <summary>
            Implemented CompareTo method
            </summary>
            <param name="other">Object to compare</param>
            <returns>0 if values are the same, -1 if this object is smaller, 1 if it is bigger</returns>
        </member>
        <member name="M:PicoXLSX.Cell.RemoveStyle">
            <summary>
            Removes the assigned style from the cell
            </summary>
            <exception cref="T:PicoXLSX.StyleException">Throws an StyleException if the style cannot be referenced</exception>
        </member>
        <member name="M:PicoXLSX.Cell.ResolveCellType">
            <summary>
            Method resets the Cell type and tries to find the actual type. This is used if a Cell was created with the CellType DEFAULT. CellTypes FORMULA and EMPTY will skip this method
            </summary>
        </member>
        <member name="M:PicoXLSX.Cell.SetCellLockedState(System.Boolean,System.Boolean)">
            <summary>
            Sets the lock state of the cell
            </summary>
            <param name="isLocked">If true, the cell will be locked if the worksheet is protected</param>
            <param name="isHidden">If true, the value of the cell will be invisible if the worksheet is protected</param>
            <exception cref="T:PicoXLSX.StyleException">Throws an UndefinedStyleException if the style used to lock cells cannot be referenced</exception>
            <remarks>The listed exception should never happen because the mentioned style is internally generated</remarks>
        </member>
        <member name="M:PicoXLSX.Cell.SetStyle(PicoXLSX.Style)">
            <summary>
            Sets the style of the cell
            </summary>
            <param name="style">Style to assign</param>
            <returns>If the passed style already exists in the workbook, the existing one will be returned, otherwise the passed one</returns>
            <exception cref="T:PicoXLSX.StyleException">Throws an StyleException if the style cannot be referenced or no style was defined</exception>
        </member>
        <member name="M:PicoXLSX.Cell.ConvertArray``1(System.Collections.Generic.List{``0})">
            <summary>
            Converts a List of supported objects into a list of cells
            </summary>
            <typeparam name="T">Generic data type</typeparam>
            <param name="list">List of generic objects</param>
            <returns>List of cells</returns>
        </member>
        <member name="M:PicoXLSX.Cell.GetCellRange(System.String)">
            <summary>
            Gets a list of cell addresses from a cell range (format A1:B3 or AAD556:AAD1000)
            </summary>
            <param name="range">Range to process</param>
            <returns>List of cell addresses</returns>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if a part of the passed range is malformed</exception>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the range is out of range (A-XFD and 1 to 1048576) </exception>
        </member>
        <member name="M:PicoXLSX.Cell.GetCellRange(System.String,System.String)">
            <summary>
            Get a list of cell addresses from a cell range
            </summary>
            <param name="startAddress">Start address as string in the format A1 - XFD1048576</param>
            <param name="endAddress">End address as string in the format A1 - XFD1048576</param>
            <returns>List of cell addresses</returns>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if a part of the passed range is malformed</exception>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the range is out of range (A-XFD and 1 to 1048576) </exception> 
        </member>
        <member name="M:PicoXLSX.Cell.GetCellRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a list of cell addresses from a cell range
            </summary>
            <param name="startColumn">Start column (zero based)</param>
            <param name="startRow">Start row (zero based)</param>
            <param name="endColumn">End column (zero based)</param>
            <param name="endRow">End row (zero based)</param>
            <returns>List of cell addresses</returns>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the value of one passed address parts is out of range (A-XFD and 1 to 1048576) </exception>
        </member>
        <member name="M:PicoXLSX.Cell.GetCellRange(PicoXLSX.Cell.Address,PicoXLSX.Cell.Address)">
            <summary>
            Get a list of cell addresses from a cell range
            </summary>
            <param name="startAddress">Start address</param>
            <param name="endAddress">End address</param>
            <returns>List of cell addresses</returns>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if a part of the passed addresses is malformed</exception>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the value of one passed address is out of range (A-XFD and 1 to 1048576) </exception>
        </member>
        <member name="M:PicoXLSX.Cell.ResolveCellAddress(System.Int32,System.Int32,PicoXLSX.Cell.AddressType)">
            <summary>
            Gets the address of a cell by the column and row number (zero based)
            </summary>
            <param name="column">Column number of the cell (zero-based)</param>
            <param name="row">Row number of the cell (zero-based)</param>
            <param name="type">Optional referencing type of the address</param>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the start or end address was out of range</exception>
            <returns>Cell Address as string in the format A1 - XFD1048576. Depending on the type, Addresses like '$A55', 'B$2' or '$A$5' are possible outputs</returns>
        </member>
        <member name="M:PicoXLSX.Cell.ResolveCellCoordinate(System.String)">
            <summary>
            Gets the column and row number (zero based) of a cell by the address
            </summary>
            <param name="address">Address as string in the format A1 - XFD1048576</param>
            <returns>Struct with row and column</returns>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the passed address is malformed</exception>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the value of the passed address is out of range (A-XFD and 1 to 1048576) </exception>
        </member>
        <member name="M:PicoXLSX.Cell.ResolveCellCoordinate(System.String,System.Int32@,System.Int32@)">
            <summary>
            Gets the column and row number (zero based) of a cell by the address
            </summary>
            <param name="address">Address as string in the format A1 - XFD1048576</param>
            <param name="column">Column number of the cell (zero-based) as out parameter</param>
            <param name="row">Row number of the cell (zero-based) as out parameter</param>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the range address was malformed</exception>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the row or column number was out of range</exception>
        </member>
        <member name="M:PicoXLSX.Cell.ResolveCellRange(System.String)">
            <summary>
            Resolves a cell range from the format like A1:B3 or AAD556:AAD1000
            </summary>
            <param name="range">Range to process</param>
            <returns>Range object</returns>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the start or end address was malformed</exception>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the range is out of range (A-XFD and 1 to 1048576) </exception>
        </member>
        <member name="M:PicoXLSX.Cell.ResolveColumn(System.String)">
            <summary>
            Gets the column number from the column address (A - XFD)
            </summary>
            <param name="columnAddress">Column address (A - XFD)</param>
            <returns>Column number (zero-based)</returns>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the passed address was out of range</exception>
        </member>
        <member name="M:PicoXLSX.Cell.ResolveColumnAddress(System.Int32)">
            <summary>
            Gets the column address (A - XFD)
            </summary>
            <param name="columnNumber">Column number (zero-based)</param>
            <returns>Column address (A - XFD)</returns>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the passed column number was out of range</exception>
        </member>
        <member name="T:PicoXLSX.Cell.Address">
            <summary>
            Struct representing the cell address as column and row (zero based)
            </summary>
        </member>
        <member name="F:PicoXLSX.Cell.Address.Column">
            <summary>
            Column number (zero based)
            </summary>
        </member>
        <member name="F:PicoXLSX.Cell.Address.Row">
            <summary>
            Row number (zero based)
            </summary>
        </member>
        <member name="F:PicoXLSX.Cell.Address.Type">
            <summary>
            Referencing type of the address
            </summary>
        </member>
        <member name="M:PicoXLSX.Cell.Address.#ctor(System.Int32,System.Int32,PicoXLSX.Cell.AddressType)">
            <summary>
            Constructor with row and column as arguments
            </summary>
            <param name="column">Column number (zero based)</param>
            <param name="row">Row number (zero based)</param>
            <param name="type">Optional referencing type of the address</param>
        </member>
        <member name="M:PicoXLSX.Cell.Address.#ctor(System.String,PicoXLSX.Cell.AddressType)">
            <summary>
            Constructor with address as string
            </summary>
            <param name="address">Address string (e.g. 'A1:B12')</param>
            <param name="type">Optional referencing type of the address</param>
        </member>
        <member name="M:PicoXLSX.Cell.Address.GetAddress">
            <summary>
            Returns the combined Address
            </summary>
            <returns>Address as string in the format A1 - XFD1048576</returns>
        </member>
        <member name="M:PicoXLSX.Cell.Address.GetColumn">
            <summary>
            Gets the column address (A - XFD)
            </summary>
            <returns>Column address as letter(s)</returns>
        </member>
        <member name="M:PicoXLSX.Cell.Address.ToString">
            <summary>
            Overwritten ToString method
            </summary>
            <returns>Returns the cell address (e.g. 'A15')</returns>
        </member>
        <member name="M:PicoXLSX.Cell.Address.Equals(PicoXLSX.Cell.Address)">
            <summary>
            Compares two addresses whether they are equal
            </summary>
            <param name="o"> Other address</param>
            <returns>True if equal</returns>
        </member>
        <member name="T:PicoXLSX.Cell.Range">
            <summary>
            Struct representing a cell range with a start and end address
            </summary>
        </member>
        <member name="F:PicoXLSX.Cell.Range.EndAddress">
            <summary>
            End address of the range
            </summary>
        </member>
        <member name="F:PicoXLSX.Cell.Range.StartAddress">
            <summary>
            Start address of the range
            </summary>
        </member>
        <member name="M:PicoXLSX.Cell.Range.#ctor(PicoXLSX.Cell.Address,PicoXLSX.Cell.Address)">
            <summary>
            Constructor with addresses as arguments
            </summary>
            <param name="start">Start address of the range</param>
            <param name="end">End address of the range</param>
        </member>
        <member name="M:PicoXLSX.Cell.Range.#ctor(System.String)">
            <summary>
            Constructor with a range string as argument
            </summary>
            <param name="range">Address range (e.g. 'A1:B12')</param>
        </member>
        <member name="M:PicoXLSX.Cell.Range.ToString">
            <summary>
            Overwritten ToString method
            </summary>
            <returns>Returns the range (e.g. 'A1:B12')</returns>
        </member>
        <member name="T:PicoXLSX.Cell.BasicFormulas">
            <summary>
            Class for handling of basic Excel formulas
            </summary>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.Average(PicoXLSX.Cell.Range)">
            <summary>
            Returns a cell with a average formula
            </summary>
            <param name="range">Cell range to apply the average operation to</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.Average(PicoXLSX.Worksheet,PicoXLSX.Cell.Range)">
            <summary>
            Returns a cell with a average formula
            </summary>
            <param name="target">Target worksheet of the average operation. Can be null if on the same worksheet</param>
            <param name="range">Cell range to apply the average operation to</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.Ceil(PicoXLSX.Cell.Address,System.Int32)">
            <summary>
            Returns a cell with a ceil formula
            </summary>
            <param name="address">Address to apply the ceil operation to</param>
            <param name="decimals">Number of decimals (digits)</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.Ceil(PicoXLSX.Worksheet,PicoXLSX.Cell.Address,System.Int32)">
            <summary>
            Returns a cell with a ceil formula
            </summary>
            <param name="target">Target worksheet of the ceil operation. Can be null if on the same worksheet</param>
            <param name="address">Address to apply the ceil operation to</param>
            <param name="decimals">Number of decimals (digits)</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.Floor(PicoXLSX.Cell.Address,System.Int32)">
            <summary>
            Returns a cell with a floor formula
            </summary>
            <param name="address">Address to apply the floor operation to</param>
            <param name="decimals">Number of decimals (digits)</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.Floor(PicoXLSX.Worksheet,PicoXLSX.Cell.Address,System.Int32)">
            <summary>
            Returns a cell with a floor formula
            </summary>
            <param name="target">Target worksheet of the floor operation. Can be null if on the same worksheet</param>
            <param name="address">Address to apply the floor operation to</param>
            <param name="decimals">Number of decimals (digits)</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.Max(PicoXLSX.Cell.Range)">
            <summary>
            Returns a cell with a max formula
            </summary>
            <param name="range">Cell range to apply the max operation to</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.Max(PicoXLSX.Worksheet,PicoXLSX.Cell.Range)">
            <summary>
            Returns a cell with a max formula
            </summary>
            <param name="target">Target worksheet of the max operation. Can be null if on the same worksheet</param>
            <param name="range">Cell range to apply the max operation to</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.Median(PicoXLSX.Cell.Range)">
            <summary>
            Returns a cell with a median formula
            </summary>
            <param name="range">Cell range to apply the median operation to</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.Median(PicoXLSX.Worksheet,PicoXLSX.Cell.Range)">
            <summary>
            Returns a cell with a median formula
            </summary>
            <param name="target">Target worksheet of the median operation. Can be null if on the same worksheet</param>
            <param name="range">Cell range to apply the median operation to</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.Min(PicoXLSX.Cell.Range)">
            <summary>
            Returns a cell with a min formula
            </summary>
            <param name="range">Cell range to apply the min operation to</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.Min(PicoXLSX.Worksheet,PicoXLSX.Cell.Range)">
            <summary>
            Returns a cell with a min formula
            </summary>
            <param name="target">Target worksheet of the min operation. Can be null if on the same worksheet</param>
            <param name="range">Cell range to apply the median operation to</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.Round(PicoXLSX.Cell.Address,System.Int32)">
            <summary>
            Returns a cell with a round formula
            </summary>
            <param name="address">Address to apply the round operation to</param>
            <param name="decimals">Number of decimals (digits)</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.Round(PicoXLSX.Worksheet,PicoXLSX.Cell.Address,System.Int32)">
            <summary>
            Returns a cell with a round formula
            </summary>
            <param name="target">Target worksheet of the round operation. Can be null if on the same worksheet</param>
            <param name="address">Address to apply the round operation to</param>
            <param name="decimals">Number of decimals (digits)</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.Sum(PicoXLSX.Cell.Range)">
            <summary>
            Returns a cell with a sum formula
            </summary>
            <param name="range">Cell range to get a sum of</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.Sum(PicoXLSX.Worksheet,PicoXLSX.Cell.Range)">
            <summary>
            Returns a cell with a sum formula
            </summary>
            <param name="target">Target worksheet of the sum operation. Can be null if on the same worksheet</param>
            <param name="range">Cell range to get a sum of</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.VLookup(System.Object,PicoXLSX.Cell.Range,System.Int32,System.Boolean)">
            <summary>
            Function to generate a Vlookup as Excel function
            </summary>
            <param name="number">Numeric value for the lookup. Valid types are int, long, float and double</param>
            <param name="range">Matrix of the lookup</param>
            <param name="columnIndex">Column index of the target column (1 based)</param>
            <param name="exactMatch">If true, an exact match is applied to the lookup</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.VLookup(System.Object,PicoXLSX.Worksheet,PicoXLSX.Cell.Range,System.Int32,System.Boolean)">
            <summary>
            Function to generate a Vlookup as Excel function
            </summary>
            <param name="number">Numeric value for the lookup. Valid types are int, long, float and double</param>
            <param name="rangeTarget">Target worksheet of the matrix. Can be null if on the same worksheet</param>
            <param name="range">Matrix of the lookup</param>
            <param name="columnIndex">Column index of the target column (1 based)</param>
            <param name="exactMatch">If true, an exact match is applied to the lookup</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.VLookup(PicoXLSX.Cell.Address,PicoXLSX.Cell.Range,System.Int32,System.Boolean)">
            <summary>
            Function to generate a Vlookup as Excel function
            </summary>
            <param name="address">Query address of a cell as string as source of the lookup</param>
            <param name="range">Matrix of the lookup</param>
            <param name="columnIndex">Column index of the target column (1 based)</param>
            <param name="exactMatch">If true, an exact match is applied to the lookup</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.VLookup(PicoXLSX.Worksheet,PicoXLSX.Cell.Address,PicoXLSX.Worksheet,PicoXLSX.Cell.Range,System.Int32,System.Boolean)">
            <summary>
            Function to generate a Vlookup as Excel function
            </summary>
            <param name="queryTarget">Target worksheet of the query argument. Can be null if on the same worksheet</param>
            <param name="address">Query address of a cell as string as source of the lookup</param>
            <param name="rangeTarget">Target worksheet of the matrix. Can be null if on the same worksheet</param>
            <param name="range">Matrix of the lookup</param>
            <param name="columnIndex">Column index of the target column (1 based)</param>
            <param name="exactMatch">If true, an exact match is applied to the lookup</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.GetVLookup(PicoXLSX.Worksheet,PicoXLSX.Cell.Address,System.Object,PicoXLSX.Worksheet,PicoXLSX.Cell.Range,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Function to generate a Vlookup as Excel function
            </summary>
            <param name="queryTarget">Target worksheet of the query argument. Can be null if on the same worksheet</param>
            <param name="address">In case of a reference lookup, query address of a cell as string</param>
            <param name="number">In case of a numeric lookup, number for the lookup</param>
            <param name="rangeTarget">Target worksheet of the matrix. Can be null if on the same worksheet</param>
            <param name="range">Matrix of the lookup</param>
            <param name="columnIndex">Column index of the target column (1 based)</param>
            <param name="exactMatch">If true, an exact match is applied to the lookup</param>
            <param name="numericLookup">If true, the lookup is a numeric lookup, otherwise a reference lookup</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Cell.BasicFormulas.GetBasicFormula(PicoXLSX.Worksheet,PicoXLSX.Cell.Range,System.String,System.String)">
            <summary>
            Function to generate a basic Excel function with one cell range as parameter and an optional post argument
            </summary>
            <param name="target">Target worksheet of the cell reference. Can be null if on the same worksheet</param>
            <param name="range">Main argument as cell range. If applied on one cell, the start and end address are identical</param>
            <param name="functionName">Internal Excel function name</param>
            <param name="postArg">Optional argument</param>
            <returns>Prepared Cell object, ready to be added to a worksheet</returns>
        </member>
        <member name="T:PicoXLSX.RangeException">
            <summary>
            Class for exceptions regarding range incidents (e.g. out-of-range)
            </summary>
        </member>
        <member name="P:PicoXLSX.RangeException.ExceptionTitle">
            <summary>
            Gets or sets the title of the exception
            </summary>
        </member>
        <member name="M:PicoXLSX.RangeException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.RangeException.#ctor(System.String,System.String)">
            <summary>
            Constructor with passed message
            </summary>
            <param name="message">Message of the exception</param>
            <param name="title">Title of the exception</param>
        </member>
        <member name="T:PicoXLSX.FormatException">
            <summary>
            Class for exceptions regarding format error incidents
            </summary>
        </member>
        <member name="P:PicoXLSX.FormatException.ExceptionTitle">
            <summary>
            Gets or sets the title of the exception
            </summary>
        </member>
        <member name="M:PicoXLSX.FormatException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.FormatException.#ctor(System.String)">
            <summary>
            Constructor with passed message
            </summary>
            <param name="message">Message of the exception</param>
        </member>
        <member name="M:PicoXLSX.FormatException.#ctor(System.String,System.String)">
            <summary>
            Constructor with passed message
            </summary>
            <param name="message">Message of the exception</param>
            <param name="title">Title of the exception</param>
        </member>
        <member name="M:PicoXLSX.FormatException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor with passed message and inner exception
            </summary>
            <param name="message">Message of the exception</param>
            <param name="inner">Inner exception</param>
            <param name="title">Title of the exception</param>
        </member>
        <member name="T:PicoXLSX.IOException">
            <summary>
            Class for exceptions regarding stream or save error incidents
            </summary>
        </member>
        <member name="P:PicoXLSX.IOException.ExceptionTitle">
            <summary>
            Gets or sets the title of the exception
            </summary>
        </member>
        <member name="M:PicoXLSX.IOException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.IOException.#ctor(System.String,System.String)">
            <summary>
            Constructor with passed message
            </summary>
            <param name="message">Message of the exception</param>
            <param name="title">Title of the exception</param>
        </member>
        <member name="M:PicoXLSX.IOException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor with passed message and inner exception
            </summary>
            <param name="message">Message of the exception</param>
            <param name="inner">Inner exception</param>
            <param name="title">Title of the exception</param>
        </member>
        <member name="T:PicoXLSX.WorksheetException">
            <summary>
            Class for exceptions regarding worksheet incidents
            </summary>
        </member>
        <member name="P:PicoXLSX.WorksheetException.ExceptionTitle">
            <summary>
            Gets or sets the title of the exception
            </summary>
        </member>
        <member name="M:PicoXLSX.WorksheetException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.WorksheetException.#ctor(System.String,System.String)">
            <summary>
            Constructor with passed message
            </summary>
            <param name="message">Message of the exception</param>
            <param name="title">Title of the exception</param>
        </member>
        <member name="T:PicoXLSX.StyleException">
            <summary>
            Class for exceptions regarding Style incidents
            </summary>
        </member>
        <member name="P:PicoXLSX.StyleException.ExceptionTitle">
            <summary>
            Gets or sets the title of the exception
            </summary>
        </member>
        <member name="M:PicoXLSX.StyleException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.StyleException.#ctor(System.String,System.String)">
            <summary>
            Constructor with passed message
            </summary>
            <param name="message">Message of the exception</param>
            <param name="title">Title of the exception</param>
        </member>
        <member name="T:PicoXLSX.LowLevel">
            <summary>
            Class for low level handling (XML, formatting, packing)
            </summary>
            <remarks>This class is only for internal use. Use the high level API (e.g. class Workbook) to manipulate data and create Excel files</remarks>
        </member>
        <member name="P:PicoXLSX.LowLevel.InterceptDocuments">
            <summary>
            Gets or set whether XML documents are intercepted during creation
            </summary>
        </member>
        <member name="P:PicoXLSX.LowLevel.InterceptedDocuments">
            <summary>
            Gets the intercepted documents if interceptDocuments is set to true
            </summary>
        </member>
        <member name="M:PicoXLSX.LowLevel.#ctor(PicoXLSX.Workbook)">
            <summary>
            Constructor with defined workbook object
            </summary>
            <param name="workbook">Workbook to process</param>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateAppPropertiesDocument">
            <summary>
            Method to create the app-properties (part of meta data) as raw XML string
            </summary>
            <returns>Raw XML string</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateCorePropertiesDocument">
            <summary>
            Method to create the core-properties (part of meta data) as raw XML string
            </summary>
            <returns>Raw XML string</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateSharedStringsDocument">
            <summary>
            Method to create shared strings as raw XML string
            </summary>
            <returns>Raw XML string</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateStyleSheetDocument">
            <summary>
            Method to create a style sheet as raw XML string
            </summary>
            <returns>Raw XML string</returns>
            <exception cref="T:PicoXLSX.StyleException">Throws an StyleException if one of the styles cannot be referenced or is null</exception>
            <remarks>The UndefinedStyleException should never happen in this state if the internally managed style collection was not tampered. </remarks>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateWorkbookDocument">
            <summary>
            Method to create a workbook as raw XML string
            </summary>
            <returns>Raw XML string</returns>
            <exception cref="T:PicoXLSX.RangeException">Throws an OutOfRangeException if an address was out of range</exception>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateWorksheetPart(PicoXLSX.Worksheet)">
            <summary>
            Method to create a worksheet part as a raw XML string
            </summary>
            <param name="worksheet">worksheet object to process</param>
            <returns>Raw XML string</returns>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if a handled date cannot be translated to (Excel internal) OADate</exception>
        </member>
        <member name="M:PicoXLSX.LowLevel.Save">
            <summary>
            Method to save the workbook
            </summary>
            <exception cref="T:PicoXLSX.IOException">Throws IOException in case of an error</exception>
            <exception cref="T:PicoXLSX.RangeException">Throws an OutOfRangeException if the start or end address of a handled cell range was out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if a handled date cannot be translated to (Excel internal) OADate</exception>
            <exception cref="T:PicoXLSX.StyleException">Throws an StyleException if one of the styles of the workbook cannot be referenced or is null</exception>
            <remarks>The StyleException should never happen in this state if the internally managed style collection was not tampered. </remarks>
        </member>
        <member name="M:PicoXLSX.LowLevel.SaveAsync">
            <summary>
            Method to save the workbook asynchronous.
            </summary>
            <remarks>Possible Exceptions are <see cref="T:PicoXLSX.IOException">IOException</see>, <see cref="T:PicoXLSX.RangeException">RangeException</see>, <see cref="T:PicoXLSX.FormatException"></see> and <see cref="T:PicoXLSX.StyleException">StyleException</see>. These exceptions may not emerge directly if using the async method since async/await adds further abstraction layers.</remarks>
            <returns>Async Task</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.SaveAsStream(System.IO.Stream)">
            <summary>
            Method to save the workbook as stream
            </summary>
            <param name="stream">Writable stream as target</param>
            <exception cref="T:PicoXLSX.IOException">Throws IOException in case of an error</exception>
            <exception cref="T:PicoXLSX.RangeException">Throws an OutOfRangeException if the start or end address of a handled cell range was out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if a handled date cannot be translated to (Excel internal) OADate</exception>
            <exception cref="T:PicoXLSX.StyleException">Throws an StyleException if one of the styles of the workbook cannot be referenced or is null</exception>
            <remarks>The StyleException should never happen in this state if the internally managed style collection was not tampered. </remarks>
        </member>
        <member name="M:PicoXLSX.LowLevel.SaveAsStreamAsync(System.IO.Stream)">
            <summary>
            Method to save the workbook as stream asynchronous.
            </summary>
            <param name="stream">Writable stream as target</param>
            <remarks>Possible Exceptions are <see cref="T:PicoXLSX.IOException">IOException</see>, <see cref="T:PicoXLSX.RangeException">RangeException</see>, <see cref="T:PicoXLSX.FormatException"></see> and <see cref="T:PicoXLSX.StyleException">StyleException</see>. These exceptions may not emerge directly if using the async method since async/await adds further abstraction layers.</remarks>
            <returns>Async Task</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.AppendXmlTag(System.Text.StringBuilder,System.String,System.String,System.String)">
            <summary>
            Method to append a simple XML tag with an enclosed value to the passed StringBuilder
            </summary>
            <param name="sb">StringBuilder to append</param>
            <param name="value">Value of the XML element</param>
            <param name="tagName">Tag name of the XML element</param>
            <param name="nameSpace">Optional XML name space. Can be empty or null</param>
            <returns>Returns false if no tag was appended, because the value or tag name was null or empty</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.AppendXmlToPackagePart(System.String,System.IO.Packaging.PackagePart,System.String)">
            <summary>
            Writes raw XML strings into the passed Package Part
            </summary>
            <param name="doc">document as raw XML string</param>
            <param name="pp">Package part to append the XML data</param>
            <param name="title">Title for interception / debugging purpose</param>
            <exception cref="T:PicoXLSX.IOException">Throws an IOException if the XML data could not be written into the Package Part</exception>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateAppString">
            <summary>
            Method to create the XML string for the app-properties document
            </summary>
            <returns>String with formatted XML data</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateColsString(PicoXLSX.Worksheet)">
            <summary>
            Method to create the columns as XML string. This is used to define the width of columns
            </summary>
            <param name="worksheet">Worksheet to process</param>
            <returns>String with formatted XML data</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateCorePropertiesString">
            <summary>
            Method to create the XML string for the core-properties document
            </summary>
            <returns>String with formatted XML data</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateMergedCellsString(PicoXLSX.Worksheet)">
            <summary>
            Method to create the merged cells string of the passed worksheet
            </summary>
            <param name="sheet">Worksheet to process</param>
            <returns>Formatted string with merged cell ranges</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateRowString(System.Collections.Generic.List{PicoXLSX.Cell},PicoXLSX.Worksheet)">
            <summary>
            Method to create a row string
            </summary>
            <param name="columnFields">List of cells</param>
            <param name="worksheet">Worksheet to process</param>
            <returns>Formatted row string</returns>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if a handled date cannot be translated to (Excel internal) OADate</exception>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateSheetProtectionString(PicoXLSX.Worksheet)">
            <summary>
            Method to create the protection string of the passed worksheet
            </summary>
            <param name="sheet">Worksheet to process</param>
            <returns>Formatted string with protection statement of the worksheet</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateStyleBorderString">
            <summary>
            Method to create the XML string for the border part of the style sheet document
            </summary>
            <returns>String with formatted XML data</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateStyleFontString">
            <summary>
            Method to create the XML string for the font part of the style sheet document
            </summary>
            <returns>String with formatted XML data</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateStyleFillString">
            <summary>
            Method to create the XML string for the fill part of the style sheet document
            </summary>
            <returns>String with formatted XML data</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateStyleNumberFormatString">
            <summary>
            Method to create the XML string for the number format part of the style sheet document 
            </summary>
            <returns>String with formatted XML data</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateStyleXfsString">
            <summary>
            Method to create the XML string for the Xf part of the style sheet document
            </summary>
            <returns>String with formatted XML data</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.CreateMruColorsString">
            <summary>
            Method to create the XML string for the color-MRU part of the style sheet document (recent colors)
            </summary>
            <returns>String with formatted XML data</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.GetSortedSheetData(PicoXLSX.Worksheet)">
            <summary>
            Method to sort the cells of a worksheet as preparation for the XML document
            </summary>
            <param name="sheet">Worksheet to process</param>
            <returns>Two dimensional array of Cell objects</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.EscapeXmlChars(System.String)">
            <summary>
            Method to escape XML characters between two XML tags
            </summary>
            <param name="input">Input string to process</param>
            <returns>Escaped string</returns>
            <remarks>Note: The XML specs allow characters up to the character value of 0x10FFFF. However, the C# char range is only up to 0xFFFF. PicoXLSX will neglect all values above this level in the sanitizing check. Illegal characters like 0x1 will be replaced with a white space (0x20)</remarks>
        </member>
        <member name="M:PicoXLSX.LowLevel.EscapeXmlAttributeChars(System.String)">
            <summary>
            Method to escape XML characters in an XML attribute
            </summary>
            <param name="input">Input string to process</param>
            <returns>Escaped string</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.GeneratePasswordHash(System.String)">
            <summary>
            Method to generate an Excel internal password hash to protect workbooks or worksheets<br></br>This method is derived from the c++ implementation by Kohei Yoshida (<a href="http://kohei.us/2008/01/18/excel-sheet-protection-password-hash/">http://kohei.us/2008/01/18/excel-sheet-protection-password-hash/</a>)
            </summary>
            <remarks>WARNING! Do not use this method to encrypt 'real' passwords or data outside from PicoXLSX. This is only a minor security feature. Use a proper cryptography method instead.</remarks>
            <param name="password">Password string in UTF-8 to encrypt</param>
            <returns>16 bit hash as hex string</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.GetOADateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Method to convert a date or date and time into the internal Excel time format (OAdate)
            </summary>
            <param name="date">Date to process</param>
            <param name="culture">CultureInfo for proper formatting of the decimal point</param>
            <returns>Date or date and time as Number</returns>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the passed date cannot be translated to the OADate format</exception>
            <remarks>OA Date format starts at January 1st 1900 (actually 00.01.1900). Dates beyond this date cannot be handled by Excel under normal circumstances and will throw a FormatException</remarks>
        </member>
        <member name="T:PicoXLSX.LowLevel.SortedMap">
            <summary>
            Class to manage key value pairs (string / string). The entries are in the order how they were added
            </summary>
        </member>
        <member name="P:PicoXLSX.LowLevel.SortedMap.Count">
            <summary>
            Number of map entries
            </summary>
        </member>
        <member name="P:PicoXLSX.LowLevel.SortedMap.Keys">
            <summary>
            Gets the keys of the map as list
            </summary>
        </member>
        <member name="P:PicoXLSX.LowLevel.SortedMap.Values">
            <summary>
            Gets the values of the map as values
            </summary>
        </member>
        <member name="M:PicoXLSX.LowLevel.SortedMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:PicoXLSX.LowLevel.SortedMap.Item(System.String)">
            <summary>
            Indexer to get the specific value by the key
            </summary>
            <param name="key">Key to corresponding value. Returns null if not found</param>
        </member>
        <member name="M:PicoXLSX.LowLevel.SortedMap.Add(System.String,System.String)">
            <summary>
            Adds a key value pair to the map. If the key already exists, only its index will be returned
            </summary>
            <param name="key">Key of the tuple</param>
            <param name="value">Value of the tuple</param>
            <returns>Position of the tuple in the map as index (zero-based)</returns>
        </member>
        <member name="M:PicoXLSX.LowLevel.SortedMap.ContainsKey(System.String)">
            <summary>
            Gets whether the specified key exists in the map
            </summary>
            <param name="key">Key to check</param>
            <returns>True if the entry exists, otherwise false</returns>
        </member>
        <member name="T:PicoXLSX.LowLevel.DocumentPath">
            <summary>
            Class to manage XML document paths
            </summary>
        </member>
        <member name="P:PicoXLSX.LowLevel.DocumentPath.Filename">
            <summary>
            File name of the document
            </summary>
        </member>
        <member name="P:PicoXLSX.LowLevel.DocumentPath.Path">
            <summary>
            Path of the document
            </summary>
        </member>
        <member name="M:PicoXLSX.LowLevel.DocumentPath.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.LowLevel.DocumentPath.#ctor(System.String,System.String)">
            <summary>
            Constructor with defined file name and path
            </summary>
            <param name="filename">File name of the document</param>
            <param name="path">Path of the document</param>
        </member>
        <member name="M:PicoXLSX.LowLevel.DocumentPath.GetFullPath">
            <summary>
            Method to return the full path of the document
            </summary>
            <returns>Full path</returns>
        </member>
        <member name="T:PicoXLSX.Metadata">
            <summary>
            Class representing the meta data of a workbook
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.Application">
            <summary>
            Gets or sets the application which created the workbook. Default is PicoXLSX
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.ApplicationVersion">
            <summary>
            Gets or sets the version of the creation application. Default is the library version of PicoXLSX. Use the format xxxxx.yyyyy (e.g. 1.0 or 55.9875) in case of a custom value.
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.Category">
            <summary>
            Gets or sets the category of the document. There are no predefined values or restrictions about the content of this field
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.Company">
            <summary>
            Gets or sets the company owning the document. This value is for organizational purpose. Add more than one manager by using the semicolon (;) between the words
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.ContentStatus">
            <summary>
            Gets or sets the status of the document. There are no predefined values or restrictions about the content of this field
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.Creator">
            <summary>
            Gets or sets the creator of the workbook. Add more than one creator by using the semicolon (;) between the authors
            </summary>	
        </member>
        <member name="P:PicoXLSX.Metadata.Description">
            <summary>
            Gets or sets the description of the document or comment about it
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.HyperlinkBase">
            <summary>
            Gets or sets the hyper-link base of the document.
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.Keywords">
            <summary>
            Gets or sets the keywords of the workbook. Separate particular keywords with semicolons (;)
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.Manager">
            <summary>
            Gets or sets the responsible manager of the document. This value is for organizational purpose.
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.Subject">
            <summary>
            Gets or sets the subject of the workbook
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.Title">
            <summary>
            Gets or sets the title of the workbook
            </summary>
        </member>
        <member name="P:PicoXLSX.Metadata.UseColorMRU">
            <summary>
            Gets or sets the whether custom defined colors (in styles) will be added as recent colors (MRU). If true. MRU information will be added
            </summary>
        </member>
        <member name="M:PicoXLSX.Metadata.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.Metadata.CheckVersion">
            <summary>
            Checks the format of the passed version string
            </summary>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the version string is malformed</exception>
        </member>
        <member name="M:PicoXLSX.Metadata.ParseVersion(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Method to parse a common version (major.minor.revision.build) into the compatible format (major.minor). The minimum value is 0.0 and the maximum value is 99999.99999<br></br>
            The minor, revision and build number are joined if possible. If the number is too long, the additional characters will be removed from the right side down to five characters (e.g. 785563 will be 78556)
            </summary>
            <param name="major">Major number from 0 to 99999</param>
            <param name="minor">Minor number</param>
            <param name="build">Build number</param>
            <param name="revision">Revision number</param>
            <returns>Formatted version number (e.g. 1.0 or 55.987)</returns>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the major number is too long or one of the numbers is negative</exception>
        </member>
        <member name="T:PicoXLSX.Style">
            <summary>
            Class representing a Style with sub classes within a style sheet. An instance of this class is only a container for the different sub-classes. These sub-classes contain the actual styling information.
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CurrentBorder">
            <summary>
            Gets or sets the current Border object of the style
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CurrentCellXf">
            <summary>
            Gets or sets the  current CellXf object of the style
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CurrentFill">
            <summary>
            Gets or sets the current Fill object of the style
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CurrentFont">
            <summary>
            Gets or sets the  current Font object of the style
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CurrentNumberFormat">
            <summary>
            Gets or sets the  current NumberFormat object of the style
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Name">
            <summary>
            Gets or sets the name of the style. If not defined, the automatically calculated hash will be used as name
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.StyleManagerReference">
            <summary>
            Sets the reference of the style manager
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.IsInternalStyle">
            <summary>
            Gets whether the style is system internal. Such styles are not meant to be altered
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.#ctor(System.String)">
            <summary>
            Constructor with parameters
            </summary>
            <param name="name">Name of the style</param>
        </member>
        <member name="M:PicoXLSX.Style.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor with parameters (internal use)
            </summary>
            <param name="name">Name of the style</param>
            <param name="forcedOrder">Number of the style for sorting purpose. Style will be placed to this position (internal use only)</param>
            <param name="internalStyle">If true, the style is marked as internal</param>
        </member>
        <member name="M:PicoXLSX.Style.Append(PicoXLSX.AbstractStyle)">
            <summary>
            Appends the specified style parts to the current one. The parts can be instances of sub-classes like Border or CellXf or a Style instance. Only the altered properties of the specified style or style part that differs from a new / untouched style instance will be appended. This enables method chaining
            </summary>
            <param name="styleToAppend">The style to append or a sub-class of Style</param>
            <returns>Current style with appended style parts</returns>
        </member>
        <member name="M:PicoXLSX.Style.ReorganizeStyle">
            <summary>
            Method to reorganize / synchronize the components of this style
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.ToString">
            <summary>
            Override toString method
            </summary>
            <returns>String of a class instance</returns>
        </member>
        <member name="M:PicoXLSX.Style.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            <exception cref="T:PicoXLSX.StyleException">MissingReferenceException - The hash of the style could not be created because one or more components are missing as references</exception>
        </member>
        <member name="M:PicoXLSX.Style.Copy">
            <summary>
            Method to copy the current object to a new one without casting
            </summary>
            <returns>Copy of the current object without the internal ID</returns>
        </member>
        <member name="M:PicoXLSX.Style.CopyStyle">
            <summary>
            Method to copy the current object to a new one with casting
            </summary>
            <returns>Copy of the current object without the internal ID</returns>
        </member>
        <member name="T:PicoXLSX.Style.Border">
            <summary>
            Class representing a Border entry. The Border entry is used to define frames and cell borders
            </summary>
        </member>
        <member name="T:PicoXLSX.Style.Border.StyleValue">
            <summary>
            Enum for the border style
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.none">
            <summary>no border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.hair">
            <summary>hair border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.dotted">
            <summary>dotted border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.dashDotDot">
            <summary>dashed border with double-dots</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.dashDot">
            <summary>dash-dotted border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.dashed">
            <summary>dashed border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.thin">
            <summary>thin border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.mediumDashDotDot">
            <summary>medium-dashed border with double-dots</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.slantDashDot">
            <summary>slant dash-dotted border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.mediumDashDot">
            <summary>medium dash-dotted border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.mediumDashed">
            <summary>medium dashed border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.medium">
            <summary>medium border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.thick">
            <summary>thick border</summary>
        </member>
        <member name="F:PicoXLSX.Style.Border.StyleValue.s_double">
            <summary>double border</summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.BottomColor">
            <summary>
            Gets or sets the color code of the bottom border. The value is expressed as hex string with the format AARRGGBB. AA (Alpha) is usually FF
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.BottomStyle">
            <summary>
            Gets or sets the  style of bottom cell border
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.DiagonalColor">
            <summary>
            Gets or sets the color code of the diagonal lines. The value is expressed as hex string with the format AARRGGBB. AA (Alpha) is usually FF
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.DiagonalDown">
            <summary>
            Gets or sets whether the downwards diagonal line is used. If true, the line is used
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.DiagonalUp">
            <summary>
            Gets or sets whether the upwards diagonal line is used. If true, the line is used
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.DiagonalStyle">
            <summary>
            Gets or sets the style of the diagonal lines
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.LeftColor">
            <summary>
            Gets or sets the color code of the left border. The value is expressed as hex string with the format AARRGGBB. AA (Alpha) is usually FF
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.LeftStyle">
            <summary>
            Gets or sets the style of left cell border
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.RightColor">
            <summary>
            Gets or sets the color code of the right border. The value is expressed as hex string with the format AARRGGBB. AA (Alpha) is usually FF
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.RightStyle">
            <summary>
            Gets or sets the style of right cell border
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.TopColor">
            <summary>
            Gets or sets the color code of the top border. The value is expressed as hex string with the format AARRGGBB. AA (Alpha) is usually FF
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Border.TopStyle">
            <summary>
            Gets or sets the style of top cell border
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.Border.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.Border.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:PicoXLSX.Style.Border.Copy">
            <summary>
            Method to copy the current object to a new one without casting
            </summary>
            <returns>Copy of the current object without the internal ID</returns>
        </member>
        <member name="M:PicoXLSX.Style.Border.CopyBorder">
            <summary>
            Method to copy the current object to a new one with casting
            </summary>
            <returns>Copy of the current object without the internal ID</returns>
        </member>
        <member name="M:PicoXLSX.Style.Border.ToString">
            <summary>
            Override toString method
            </summary>
            <returns>String of a class</returns>
        </member>
        <member name="M:PicoXLSX.Style.Border.IsEmpty">
            <summary>
            Method to determine whether the object has no values but the default values (means: is empty and must not be processed)
            </summary>
            <returns>True if empty, otherwise false</returns>
        </member>
        <member name="M:PicoXLSX.Style.Border.GetStyleName(PicoXLSX.Style.Border.StyleValue)">
            <summary>
            Gets the border style name from the enum
            </summary>
            <param name="style">Enum to process</param>
            <returns>The valid value of the border style as String</returns>
        </member>
        <member name="T:PicoXLSX.Style.CellXf">
            <summary>
            Class representing an XF entry. The XF entry is used to make reference to other style instances like Border or Fill and for the positioning of the cell content
            </summary>
        </member>
        <member name="T:PicoXLSX.Style.CellXf.HorizontalAlignValue">
            <summary>
            Enum for the horizontal alignment of a cell 
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.HorizontalAlignValue.left">
            <summary>Content will be aligned left</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.HorizontalAlignValue.center">
            <summary>Content will be aligned in the center</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.HorizontalAlignValue.right">
            <summary>Content will be aligned right</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.HorizontalAlignValue.fill">
            <summary>Content will fill up the cell</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.HorizontalAlignValue.justify">
            <summary>justify alignment</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.HorizontalAlignValue.general">
            <summary>General alignment</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.HorizontalAlignValue.centerContinuous">
            <summary>Center continuous alignment</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.HorizontalAlignValue.distributed">
            <summary>Distributed alignment</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.HorizontalAlignValue.none">
            <summary>No alignment. The alignment will not be used in a style</summary>
        </member>
        <member name="T:PicoXLSX.Style.CellXf.TextBreakValue">
            <summary>
            Enum for text break options
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.TextBreakValue.wrapText">
            <summary>Word wrap is active</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.TextBreakValue.shrinkToFit">
            <summary>Text will be resized to fit the cell</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.TextBreakValue.none">
            <summary>Text will overflow in cell</summary>
        </member>
        <member name="T:PicoXLSX.Style.CellXf.TextDirectionValue">
            <summary>
            Enum for the general text alignment direction
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.TextDirectionValue.horizontal">
            <summary>Text direction is horizontal (default)</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.TextDirectionValue.vertical">
            <summary>Text direction is vertical</summary>
        </member>
        <member name="T:PicoXLSX.Style.CellXf.VerticalAlignValue">
            <summary>
            Enum for the vertical alignment of a cell 
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.VerticalAlignValue.bottom">
            <summary>Content will be aligned on the bottom (default)</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.VerticalAlignValue.top">
            <summary>Content will be aligned on the top</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.VerticalAlignValue.center">
            <summary>Content will be aligned in the center</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.VerticalAlignValue.justify">
            <summary>justify alignment</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.VerticalAlignValue.distributed">
            <summary>Distributed alignment</summary>
        </member>
        <member name="F:PicoXLSX.Style.CellXf.VerticalAlignValue.none">
            <summary>No alignment. The alignment will not be used in a style</summary>
        </member>
        <member name="P:PicoXLSX.Style.CellXf.ForceApplyAlignment">
            <summary>
            Gets or sets whether the applyAlignment property (used to merge cells) will be defined in the XF entry of the style. If true, applyAlignment will be defined
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CellXf.Hidden">
            <summary>
            Gets or sets whether the hidden property (used for protection or hiding of cells) will be defined in the XF entry of the style. If true, hidden will be defined
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CellXf.HorizontalAlign">
            <summary>
            Gets or sets the horizontal alignment of the style
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CellXf.Locked">
            <summary>
            Gets or sets whether the locked property (used for locking / protection of cells or worksheets) will be defined in the XF entry of the style. If true, locked will be defined
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CellXf.Alignment">
            <summary>
            Gets or sets the text break options of the style
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CellXf.TextDirection">
            <summary>
            Gets or sets the direction of the text within the cell
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CellXf.TextRotation">
            <summary>
            Gets or sets the text rotation in degrees (from +90 to -90)
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.CellXf.VerticalAlign">
            <summary>
            Gets or sets the vertical alignment of the style
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.CellXf.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.CellXf.CalculateInternalRotation">
            <summary>
            Method to calculate the internal text rotation. The text direction and rotation are handled internally by the text rotation value
            </summary>
            <returns>Returns the valid rotation in degrees for internal uses (LowLevel)</returns>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the rotation angle (-90 to 90) is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Style.CellXf.ToString">
            <summary>
            Override toString method
            </summary>
            <returns>String of a class instance</returns>
        </member>
        <member name="M:PicoXLSX.Style.CellXf.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:PicoXLSX.Style.CellXf.Copy">
            <summary>
            Method to copy the current object to a new one without casting
            </summary>
            <returns>Copy of the current object without the internal ID</returns>
        </member>
        <member name="M:PicoXLSX.Style.CellXf.CopyCellXf">
            <summary>
            Method to copy the current object to a new one with casting
            </summary>
            <returns>Copy of the current object without the internal ID</returns>
        </member>
        <member name="T:PicoXLSX.Style.Fill">
            <summary>
            Class representing a Fill (background) entry. The Fill entry is used to define background colors and fill patterns
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.Fill.DEFAULTCOLOR">
            <summary>
            Default Color (foreground or background) as constant
            </summary>
        </member>
        <member name="T:PicoXLSX.Style.Fill.FillType">
            <summary>
            Enum for the type of the color
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.Fill.FillType.patternColor">
            <summary>Color defines a pattern color </summary>
        </member>
        <member name="F:PicoXLSX.Style.Fill.FillType.fillColor">
            <summary>Color defines a solid fill color </summary>
        </member>
        <member name="T:PicoXLSX.Style.Fill.PatternValue">
            <summary>
            Enum for the pattern values
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.Fill.PatternValue.none">
            <summary>No pattern (default)</summary>
        </member>
        <member name="F:PicoXLSX.Style.Fill.PatternValue.solid">
            <summary>Solid fill (for colors)</summary>
        </member>
        <member name="F:PicoXLSX.Style.Fill.PatternValue.darkGray">
            <summary>Dark gray fill</summary>
        </member>
        <member name="F:PicoXLSX.Style.Fill.PatternValue.mediumGray">
            <summary>Medium gray fill</summary>
        </member>
        <member name="F:PicoXLSX.Style.Fill.PatternValue.lightGray">
            <summary>Light gray fill</summary>
        </member>
        <member name="F:PicoXLSX.Style.Fill.PatternValue.gray0625">
            <summary>6.25% gray fill</summary>
        </member>
        <member name="F:PicoXLSX.Style.Fill.PatternValue.gray125">
            <summary>12.5% gray fill</summary>
        </member>
        <member name="P:PicoXLSX.Style.Fill.BackgroundColor">
            <summary>
            Gets or sets the background color of the fill. The value is expressed as hex string with the format AARRGGBB. AA (Alpha) is usually FF
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Fill.ForegroundColor">
            <summary>
            Gets or sets the foreground color of the fill. The value is expressed as hex string with the format AARRGGBB. AA (Alpha) is usually FF
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Fill.IndexedColor">
            <summary>
            Gets or sets the indexed color (Default is 64)
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Fill.PatternFill">
            <summary>
            Gets or sets the pattern type of the fill (Default is none)
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.Fill.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.Fill.#ctor(System.String,System.String)">
            <summary>
            Constructor with foreground and background color
            </summary>
            <param name="foreground">Foreground color of the fill</param>
            <param name="background">Background color of the fill</param>
        </member>
        <member name="M:PicoXLSX.Style.Fill.#ctor(System.String,PicoXLSX.Style.Fill.FillType)">
            <summary>
            Constructor with color value and fill type
            </summary>
            <param name="value">Color value</param>
            <param name="filltype">Fill type (fill or pattern)</param>
        </member>
        <member name="M:PicoXLSX.Style.Fill.ToString">
            <summary>
            Override toString method
            </summary>
            <returns>String of a class</returns>
        </member>
        <member name="M:PicoXLSX.Style.Fill.Copy">
            <summary>
            Method to copy the current object to a new one without casting
            </summary>
            <returns>Copy of the current object without the internal ID</returns>
        </member>
        <member name="M:PicoXLSX.Style.Fill.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:PicoXLSX.Style.Fill.CopyFill">
            <summary>
            Method to copy the current object to a new one with casting
            </summary>
            <returns>Copy of the current object without the internal ID</returns>
        </member>
        <member name="M:PicoXLSX.Style.Fill.SetColor(System.String,PicoXLSX.Style.Fill.FillType)">
            <summary>
            Sets the color and the depending fill type
            </summary>
            <param name="value">color value</param>
            <param name="filltype">fill type (fill or pattern)</param>
        </member>
        <member name="M:PicoXLSX.Style.Fill.GetPatternName(PicoXLSX.Style.Fill.PatternValue)">
            <summary>
            Gets the pattern name from the enum
            </summary>
            <param name="pattern">Enum to process</param>
            <returns>The valid value of the pattern as String</returns>
        </member>
        <member name="T:PicoXLSX.Style.Font">
            <summary>
            Class representing a Font entry. The Font entry is used to define text formatting
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.Font.DEFAULTFONT">
            <summary>
            Default font family as constant
            </summary>
        </member>
        <member name="T:PicoXLSX.Style.Font.SchemeValue">
            <summary>
            Enum for the font scheme
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.Font.SchemeValue.major">
            <summary>Font scheme is major</summary>
        </member>
        <member name="F:PicoXLSX.Style.Font.SchemeValue.minor">
            <summary>Font scheme is minor (default)</summary>
        </member>
        <member name="F:PicoXLSX.Style.Font.SchemeValue.none">
            <summary>No Font scheme is used</summary>
        </member>
        <member name="T:PicoXLSX.Style.Font.VerticalAlignValue">
            <summary>
            Enum for the vertical alignment of the text from base line
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.Font.VerticalAlignValue.subscript">
            <summary>Text will be rendered as subscript</summary>
        </member>
        <member name="F:PicoXLSX.Style.Font.VerticalAlignValue.superscript">
            <summary>Text will be rendered as superscript</summary>
        </member>
        <member name="F:PicoXLSX.Style.Font.VerticalAlignValue.none">
            <summary>Text will be rendered normal</summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.Bold">
            <summary>
            Gets or sets whether the font is bold. If true, the font is declared as bold
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.Charset">
            <summary>
            Gets or sets the char set of the Font (Default is empty)
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.ColorTheme">
            <summary>
            Gets or sets the font color theme (Default is 1)
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.ColorValue">
            <summary>
            Gets or sets the font color (default is empty)
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.DoubleUnderline">
            <summary>
            Gets or sets whether the font has a double underline. If true, the font is declared with a double underline
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.Family">
            <summary>
             Gets or sets the font family (Default is 2)
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.IsDefaultFont">
            <summary>
            Gets whether the font is equals the default font
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.Italic">
            <summary>
            Gets or sets whether the font is italic. If true, the font is declared as italic
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.Name">
            <summary>
            Gets or sets the font name (Default is Calibri)
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.Scheme">
            <summary>
            Gets or sets the font scheme (Default is minor)
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.Size">
            <summary>
            Gets or sets the font size. Valid range is from 8 to 75
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.Strike">
            <summary>
            Gets or sets whether the font is struck through. If true, the font is declared as strike-through
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.Underline">
            <summary>
            Gets or sets whether the font is underlined. If true, the font is declared as underlined
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.Font.VerticalAlign">
            <summary>
            Gets or sets the alignment of the font (Default is none)
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.Font.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.Font.ToString">
            <summary>
            Override toString method
            </summary>
            <returns>String of a class</returns>
        </member>
        <member name="M:PicoXLSX.Style.Font.Copy">
            <summary>
            Method to copy the current object to a new one without casting
            </summary>
            <returns>Copy of the current object without the internal ID</returns>
        </member>
        <member name="M:PicoXLSX.Style.Font.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:PicoXLSX.Style.Font.CopyFont">
            <summary>
            Method to copy the current object to a new one with casting
            </summary>
            <returns>Copy of the current object without the internal ID</returns>
        </member>
        <member name="T:PicoXLSX.Style.NumberFormat">
            <summary>
            Class representing a NumberFormat entry. The NumberFormat entry is used to define cell formats like currency or date
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.CUSTOMFORMAT_START_NUMBER">
            <summary>
            Start ID for custom number formats as constant
            </summary>
        </member>
        <member name="T:PicoXLSX.Style.NumberFormat.FormatNumber">
            <summary>
            Enum for predefined number formats
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.none">
            <summary>No format / Default</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_1">
            <summary>Format: 0</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_2">
            <summary>Format: 0.00</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_3">
            <summary>Format: #,##0</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_4">
            <summary>Format: #,##0.00</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_5">
            <summary>Format: $#,##0_);($#,##0)</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_6">
            <summary>Format: $#,##0_);[Red]($#,##0)</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_7">
            <summary>Format: $#,##0.00_);($#,##0.00)</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_8">
            <summary>Format: $#,##0.00_);[Red]($#,##0.00)</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_9">
            <summary>Format: 0%</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_10">
            <summary>Format: 0.00%</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_11">
            <summary>Format: 0.00E+00</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_12">
            <summary>Format: # ?/?</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_13">
            <summary>Format: # ??/??</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_14">
            <summary>Format: m/d/yyyy</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_15">
            <summary>Format: d-mmm-yy</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_16">
            <summary>Format: d-mmm</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_17">
            <summary>Format: mmm-yy</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_18">
            <summary>Format: mm AM/PM</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_19">
            <summary>Format: h:mm:ss AM/PM</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_20">
            <summary>Format: h:mm</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_21">
            <summary>Format: h:mm:ss</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_22">
            <summary>Format: m/d/yyyy h:mm</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_37">
            <summary>Format: #,##0_);(#,##0)</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_38">
            <summary>Format: #,##0_);[Red](#,##0)</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_39">
            <summary>Format: #,##0.00_);(#,##0.00)</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_40">
            <summary>Format: #,##0.00_);[Red](#,##0.00)</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_45">
            <summary>Format: mm:ss</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_46">
            <summary>Format: [h]:mm:ss</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_47">
            <summary>Format: mm:ss.0</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_48">
            <summary>Format: ##0.0E+0</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.format_49">
            <summary>Format: #</summary>
        </member>
        <member name="F:PicoXLSX.Style.NumberFormat.FormatNumber.custom">
            <summary>Custom Format (ID 164 and higher)</summary>
        </member>
        <member name="P:PicoXLSX.Style.NumberFormat.CustomFormatCode">
            <summary>
            Gets or sets the custom format code in the notation of Excel
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.NumberFormat.CustomFormatID">
            <summary>
            Gets or sets the format number of the custom format. Must be higher or equal then predefined custom number (164) 
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.NumberFormat.IsCustomFormat">
            <summary>
            Gets whether the number format is a custom format (higher or equals 164). If true, the format is custom
            </summary>
        </member>
        <member name="P:PicoXLSX.Style.NumberFormat.Number">
            <summary>
            Gets or sets the format number. Set this to custom (164) in case of custom number formats
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.NumberFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.Style.NumberFormat.ToString">
            <summary>
            Override toString method
            </summary>
            <returns>String of a class</returns>
        </member>
        <member name="M:PicoXLSX.Style.NumberFormat.Copy">
            <summary>
            Method to copy the current object to a new one without casting
            </summary>
            <returns>Copy of the current object without the internal ID</returns>
        </member>
        <member name="M:PicoXLSX.Style.NumberFormat.CopyNumberFormat">
            <summary>
            Method to copy the current object to a new one with casting
            </summary>
            <returns>Copy of the current object without the internal ID</returns>
        </member>
        <member name="M:PicoXLSX.Style.NumberFormat.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:PicoXLSX.Style.BasicStyles">
            <summary>
            Factory class with the most important predefined styles
            </summary>
        </member>
        <member name="T:PicoXLSX.Style.BasicStyles.StyleEnum">
            <summary>
            Enum with style selection
            </summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.bold">
            <summary>Format text bold</summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.italic">
            <summary>Format text italic</summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.boldItalic">
            <summary>Format text bold and italic</summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.underline">
            <summary>Format text with an underline</summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.doubleUnderline">
            <summary>Format text with a double underline</summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.strike">
            <summary>Format text with a strike-through</summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.dateFormat">
            <summary>Format number as date</summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.roundFormat">
            <summary>Rounds number as an integer</summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.borderFrame">
            <summary>Format cell with a thin border</summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.borderFrameHeader">
            <summary>Format cell with a thin border and a thick bottom line as header cell</summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.dottedFill_0_125">
            <summary>Special pattern fill style for compatibility purpose </summary>
        </member>
        <member name="F:PicoXLSX.Style.BasicStyles.StyleEnum.mergeCellStyle">
            <summary>Style to apply on merged cells </summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.Bold">
            <summary>Gets the bold style</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.BoldItalic">
            <summary>Gets the bold and italic style</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.BorderFrame">
            <summary>Gets the border frame style</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.BorderFrameHeader">
            <summary>Gets the border style for header cells</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.DateFormat">
            <summary>Gets the date format style</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.DoubleUnderline">
            <summary>Gets the double underline style</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.DottedFill_0_125">
            <summary>Gets the special pattern fill style (for compatibility)</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.Italic">
            <summary>Gets the italic style</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.MergeCellStyle">
            <summary>Gets the style used when merging cells</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.RoundFormat">
            <summary>Gets the round format style</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.Strike">
            <summary>Gets the strike style</summary>
        </member>
        <member name="P:PicoXLSX.Style.BasicStyles.Underline">
            <summary>Gets the underline style</summary>
        </member>
        <member name="M:PicoXLSX.Style.BasicStyles.GetStyle(PicoXLSX.Style.BasicStyles.StyleEnum)">
            <summary>
            Method to maintain the styles and to create singleton instances
            </summary>
            <param name="value">Enum value to maintain</param>
            <returns>The style according to the passed enum value</returns>
        </member>
        <member name="M:PicoXLSX.Style.BasicStyles.ColorizedText(System.String)">
            <summary>
            Gets a style to colorize the text of a cell
            </summary>
            <param name="rgb">RGB code in hex format (e.g. FF00AC). Alpha will be set to full opacity (FF)</param>
            <returns>Style with font color definition</returns>
        </member>
        <member name="M:PicoXLSX.Style.BasicStyles.ColorizedBackground(System.String)">
            <summary>
            Gets a style to colorize the background of a cell
            </summary>
            <param name="rgb">RGB code in hex format (e.g. FF00AC). Alpha will be set to full opacity (FF)</param>
            <returns>Style with background color definition</returns>
        </member>
        <member name="M:PicoXLSX.Style.BasicStyles.Font(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets a style with a user defined font
            </summary>
            <param name="fontName">Name of the font</param>
            <param name="fontSize">Size of the font in points (optional; default 11)</param>
            <param name="isBold">If true, the font will be bold (optional; default false)</param>
            <param name="isItalic">If true, the font will be italic (optional; default false)</param>
            <returns>Style with font definition</returns>
            <remarks>The font name as well as the availability of bold and italic on the font cannot be validated by PicoXLSX. The generated file may be corrupt or rendered with a fall-back font in case of an error</remarks>
        </member>
        <member name="T:PicoXLSX.AbstractStyle">
            <summary>
            Class represents an abstract style component
            </summary>
        </member>
        <member name="P:PicoXLSX.AbstractStyle.InternalID">
            <summary>
            Gets or sets the internal ID for sorting purpose in the Excel style document (nullable)
            </summary>
        </member>
        <member name="M:PicoXLSX.AbstractStyle.Copy">
            <summary>
            Abstract method to copy a component (dereferencing)
            </summary>
            <returns>Returns a copied component</returns>
        </member>
        <member name="M:PicoXLSX.AbstractStyle.CopyProperties``1(``0,``0)">
            <summary>
            Internal method to copy altered properties from a source object. The decision whether a property is copied is dependent on a untouched reference object
            </summary>
            <typeparam name="T">Style or sub-class of Style that extends AbstractStyle</typeparam>
            <param name="source">Source object with properties to copy</param>
            <param name="reference">Reference object to decide whether the properties from the source objects are altered or not</param>
        </member>
        <member name="M:PicoXLSX.AbstractStyle.CompareTo(PicoXLSX.AbstractStyle)">
            <summary>
            Method to compare two objects for sorting purpose
            </summary>
            <param name="other">Other object to compare with this object</param>
            <returns>-1 if the other object is bigger. 0 if both objects are equal. 1 if the other object is smaller.</returns>
        </member>
        <member name="M:PicoXLSX.AbstractStyle.Equals(PicoXLSX.AbstractStyle)">
            <summary>
            Method to compare two objects for sorting purpose
            </summary>
            <param name="other">Other object to compare with this object</param>
            <returns>True if both objects are equal, otherwise false</returns>
        </member>
        <member name="M:PicoXLSX.AbstractStyle.CastValue(System.Object,System.Text.StringBuilder@,System.Nullable{System.Char})">
            <summary>
            Method to cast values of the components to string values for the hash calculation (protected/internal static method)
            </summary>
            <param name="o">Value to cast</param>
            <param name="sb">StringBuilder reference to put the casted object in</param>
            <param name="delimiter">Delimiter character to append after the casted value</param>
        </member>
        <member name="T:PicoXLSX.AbstractStyle.AppendAttribute">
            <summary>
            Attribute designated to control the copying of style properties
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:PicoXLSX.AbstractStyle.AppendAttribute.Ignore">
            <summary>
            Indicates whether the property annotated with the attribute is ignored during the copying of properties
            </summary>
            <value>
              <c>true</c> if ignored, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:PicoXLSX.AbstractStyle.AppendAttribute.NestedProperty">
            <summary>
            Indicates whether the property annotated with the attribute is a nested property. Nested properties are ignored but during the copying of properties but can be broken down to its sub-properties
            </summary>
            <value>
              <c>true</c> if a nested property, otherwise <c>false</c>.
            </value>
        </member>
        <member name="M:PicoXLSX.AbstractStyle.AppendAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:PicoXLSX.StyleManager">
            <summary>
            Class representing a style manager to maintain all styles and its components of a workbook
            </summary>
        </member>
        <member name="M:PicoXLSX.StyleManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.StyleManager.GetComponentByHash(System.Collections.Generic.List{PicoXLSX.AbstractStyle}@,System.Int32)">
            <summary>
            Gets a component by its hash
            </summary>
            <param name="list">List to check</param>
            <param name="hash">Hash of the component</param>
            <returns>Determined component. If not found, null will be returned</returns>
        </member>
        <member name="M:PicoXLSX.StyleManager.GetBorderByHash(System.Int32)">
            <summary>
            Gets a border by its hash
            </summary>
            <param name="hash">Hash of the border</param>
            <returns>Determined border</returns>
            <exception cref="T:PicoXLSX.StyleException">Throws a StyleException if the border was not found in the style manager</exception>
        </member>
        <member name="M:PicoXLSX.StyleManager.GetBorders">
            <summary>
            Gets all borders of the style manager
            </summary>
            <returns>Array of borders</returns>
        </member>
        <member name="M:PicoXLSX.StyleManager.GetBorderStyleNumber">
            <summary>
            Gets the number of borders in the style manager
            </summary>
            <returns>Number of stored borders</returns>
        </member>
        <member name="M:PicoXLSX.StyleManager.GetCellXfByHash(System.Int32)">
            <summary>
            Gets a cellXf by its hash
            </summary>
            <param name="hash">Hash of the cellXf</param>
            <returns>Determined cellXf</returns>
            <exception cref="T:PicoXLSX.StyleException">Throws a StyleException if the cellXf was not found in the style manager</exception>
        </member>
        <member name="M:PicoXLSX.StyleManager.GetCellXfs">
            <summary>
            Gets all cellXfs of the style manager
            </summary>
            <returns>Array of cellXfs</returns>
        </member>
        <member name="M:PicoXLSX.StyleManager.GetCellXfStyleNumber">
            <summary>
            Gets the number of cellXfs in the style manager
            </summary>
            <returns>Number of stored cellXfs</returns>
        </member>
        <member name="M:PicoXLSX.StyleManager.GetFillByHash(System.Int32)">
            <summary>
            Gets a fill by its hash
            </summary>
            <param name="hash">Hash of the fill</param>
            <returns>Determined fill</returns>
            <exception cref="T:PicoXLSX.StyleException">Throws a StyleException if the fill was not found in the style manager</exception>
        </member>
        <member name="M:PicoXLSX.StyleManager.GetFills">
            <summary>
            Gets all fills of the style manager
            </summary>
            <returns>Array of fills</returns>
        </member>
        <member name="M:PicoXLSX.StyleManager.GetFillStyleNumber">
            <summary>
            Gets the number of fills in the style manager
            </summary>
            <returns>Number of stored fills</returns>
        </member>
        <member name="M:PicoXLSX.StyleManager.GetFontByHash(System.Int32)">
            <summary>
            Gets a font by its hash
            </summary>
            <param name="hash">Hash of the font</param>
            <returns>Determined font</returns>
            <exception cref="T:PicoXLSX.StyleException">Throws a StyleException if the font was not found in the style manager</exception>
        </member>
        <member name="M:PicoXLSX.StyleManager.GetFonts">
            <summary>
            Gets all fonts of the style manager
            </summary>
            <returns>Array of fonts</returns>
        </member>
        <member name="M:PicoXLSX.StyleManager.GetFontStyleNumber">
            <summary>
            Gets the number of fonts in the style manager
            </summary>
            <returns>Number of stored fonts</returns>
        </member>
        <member name="M:PicoXLSX.StyleManager.GetNumberFormatByHash(System.Int32)">
            <summary>
            Gets a numberFormat by its hash
            </summary>
            <param name="hash">Hash of the numberFormat</param>
            <returns>Determined numberFormat</returns>
            <exception cref="T:PicoXLSX.StyleException">Throws a StyleException if the numberFormat was not found in the style manager</exception>
        </member>
        <member name="M:PicoXLSX.StyleManager.GetNumberFormats">
            <summary>
            Gets all numberFormats of the style manager
            </summary>
            <returns>Array of numberFormats</returns>
        </member>
        <member name="M:PicoXLSX.StyleManager.GetNumberFormatStyleNumber">
            <summary>
            Gets the number of numberFormats in the style manager
            </summary>
            <returns>Number of stored numberFormats</returns>
        </member>
        <member name="M:PicoXLSX.StyleManager.GetStyleByName(System.String)">
            <summary>
            Gets a style by its name
            </summary>
            <param name="name">Name of the style</param>
            <returns>Determined style</returns>
            <exception cref="T:PicoXLSX.StyleException">Throws a StyleException if the style was not found in the style manager</exception>
        </member>
        <member name="M:PicoXLSX.StyleManager.GetStyleByHash(System.Int32)">
            <summary>
            Gets a style by its hash
            </summary>
            <param name="hash">Hash of the style</param>
            <returns>Determined style</returns>
            <exception cref="T:PicoXLSX.StyleException">Throws a StyleException if the style was not found in the style manager</exception>
        </member>
        <member name="M:PicoXLSX.StyleManager.GetStyles">
            <summary>
            Gets all styles of the style manager
            </summary>
            <returns>Array of styles</returns>
        </member>
        <member name="M:PicoXLSX.StyleManager.GetStyleNumber">
            <summary>
            Gets the number of styles in the style manager
            </summary>
            <returns>Number of stored styles</returns>
        </member>
        <member name="M:PicoXLSX.StyleManager.AddStyle(PicoXLSX.Style)">
            <summary>
            Adds a style component to the manager
            </summary>
            <param name="style">Style to add</param>
            <returns>Added or determined style in the manager</returns>
        </member>
        <member name="M:PicoXLSX.StyleManager.AddStyleComponent(PicoXLSX.AbstractStyle,System.Nullable{System.Int32})">
            <summary>
            Adds a style component to the manager with an ID
            </summary>
            <param name="style">Component to add</param>
            <param name="id">Id of the component</param>
            <returns>Hash of the added or determined component</returns>
        </member>
        <member name="M:PicoXLSX.StyleManager.AddStyleComponent(PicoXLSX.AbstractStyle)">
            <summary>
            Adds a style component to the manager
            </summary>
            <param name="style">Component to add</param>
            <returns>Hash of the added or determined component</returns>
        </member>
        <member name="M:PicoXLSX.StyleManager.RemoveStyle(System.String)">
            <summary>
            Removes a style and all its components from the style manager
            </summary>
            <param name="styleName">Name of the style to remove</param>
            <exception cref="T:PicoXLSX.StyleException">Throws a StyleException if the style was not found in the style manager</exception>
        </member>
        <member name="M:PicoXLSX.StyleManager.Reorganize(System.Collections.Generic.List{PicoXLSX.AbstractStyle}@)">
            <summary>
            Method to reorganize / reorder a list of style components
            </summary>
            <param name="list">List to reorganize as reference</param>
        </member>
        <member name="M:PicoXLSX.StyleManager.CleanupStyleComponents">
            <summary>
            Method to cleanup style components in the style manager
            </summary>
        </member>
        <member name="M:PicoXLSX.StyleManager.IsUsedByStyle(PicoXLSX.AbstractStyle)">
            <summary>
            Checks whether a style component in the style manager is used by a style
            </summary>
            <param name="component">Component to check</param>
            <returns>If true, the component is in use</returns>
        </member>
        <member name="T:PicoXLSX.NamespaceDoc">
            <summary>
            PicoXLSX is a library to generate XLSX files in an easy and native way
            </summary>
        </member>
        <member name="T:PicoXLSX.Workbook">
            <summary>
            Class representing a workbook
            </summary>
            
        </member>
        <member name="P:PicoXLSX.Workbook.WS">
            <summary>
            Gets the shortener object for the current worksheet
            </summary>
        </member>
        <member name="P:PicoXLSX.Workbook.CurrentWorksheet">
            <summary>
            Gets the current worksheet
            </summary>
        </member>
        <member name="P:PicoXLSX.Workbook.Filename">
            <summary>
            Gets or sets the fileName of the workbook
            </summary>
        </member>
        <member name="P:PicoXLSX.Workbook.LockStructureIfProtected">
            <summary>
            Gets whether the structure are locked if workbook is protected
            </summary>
            <see cref="M:PicoXLSX.Workbook.SetWorkbookProtection(System.Boolean,System.Boolean,System.Boolean,System.String)"/>
        </member>
        <member name="P:PicoXLSX.Workbook.LockWindowsIfProtected">
            <summary>
            Gets whether the windows are locked if workbook is protected
            </summary>
            <see cref="M:PicoXLSX.Workbook.SetWorkbookProtection(System.Boolean,System.Boolean,System.Boolean,System.String)"/> 
        </member>
        <member name="P:PicoXLSX.Workbook.WorkbookMetadata">
            <summary>
            Meta data object of the workbook
            </summary>
        </member>
        <member name="P:PicoXLSX.Workbook.SelectedWorksheet">
            <summary>
            Gets the selected worksheet. The selected worksheet is not the current worksheet while design time but the selected sheet in the output file
            </summary>
        </member>
        <member name="P:PicoXLSX.Workbook.Styles">
            <summary>
            Gets the style manager of this workbook
            </summary>
        </member>
        <member name="P:PicoXLSX.Workbook.UseWorkbookProtection">
            <summary>
            Gets or sets whether the workbook is protected
            </summary>
        </member>
        <member name="P:PicoXLSX.Workbook.WorkbookProtectionPassword">
            <summary>
            Gets the password used for workbook protection
            </summary>
            <see cref="M:PicoXLSX.Workbook.SetWorkbookProtection(System.Boolean,System.Boolean,System.Boolean,System.String)"/>
        </member>
        <member name="P:PicoXLSX.Workbook.Worksheets">
            <summary>
            Gets the list of worksheets in the workbook
            </summary>
        </member>
        <member name="M:PicoXLSX.Workbook.#ctor(System.Boolean)">
            <summary>
            Constructor with additional parameter to create a default worksheet. This constructor can be used to define a workbook that is saved as stream
            </summary>
            <param name="createWorkSheet">If true, a default worksheet with the name 'Sheet1' will be crated and set as current worksheet</param>
        </member>
        <member name="M:PicoXLSX.Workbook.#ctor(System.String)">
            <summary>
            Constructor with additional parameter to create a default worksheet with the specified name. This constructor can be used to define a workbook that is saved as stream
            </summary>
            <param name="sheetName">Filename of the workbook.  The name will be sanitized automatically according to the specifications of Excel</param>
        </member>
        <member name="M:PicoXLSX.Workbook.#ctor(System.String,System.String)">
            <summary>
            Constructor with fileName ant the name of the first worksheet
            </summary>
            <param name="filename">Filename of the workbook.  The name will be sanitized automatically according to the specifications of Excel</param>
            <param name="sheetName">Name of the first worksheet. The name will be sanitized automatically according to the specifications of Excel</param>
        </member>
        <member name="M:PicoXLSX.Workbook.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor with fileName ant the name of the first worksheet
            </summary>
            <param name="filename">Filename of the workbook</param>
            <param name="sheetName">Name of the first worksheet</param>
            <param name="sanitizeSheetName">If true, the name of the worksheet will be sanitized automatically according to the specifications of Excel</param>
        </member>
        <member name="M:PicoXLSX.Workbook.AddStyle(PicoXLSX.Style)">
            <summary>
            Adds a style to the style manager
            </summary>
            <param name="style">Style to add</param>
            <returns>Returns the managed style of the style manager</returns>
        </member>
        <member name="M:PicoXLSX.Workbook.AddStyleComponent(PicoXLSX.Style,PicoXLSX.AbstractStyle)">
            <summary>
            Adds a style component to a style
            </summary>
            <param name="baseStyle">Style to append a component</param>
            <param name="newComponent">Component to add to the baseStyle</param>
            <returns>Returns the managed style of the style manager</returns>
        </member>
        <member name="M:PicoXLSX.Workbook.AddWorksheet(System.String)">
            <summary>
            Adding a new Worksheet. The new worksheet will be defined as current worksheet
            </summary>
            <param name="name">Name of the new worksheet</param>
            <exception cref="T:PicoXLSX.WorksheetException">Throws a WorksheetNameAlreadxExistsException if the name of the worksheet already exists</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the name contains illegal characters or is out of range (length between 1 an 31 characters)</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.AddWorksheet(System.String,System.Boolean)">
            <summary>
            Adding a new Worksheet with a sanitizing option. The new worksheet will be defined as current worksheet
            </summary>
            <param name="name">Name of the new worksheet</param>
            <param name="sanitizeSheetName">If true, the name of the worksheet will be sanitized automatically according to the specifications of Excel</param>
            <exception cref="T:PicoXLSX.WorksheetException">WorksheetException is thrown if the name of the worksheet already exists and sanitizeSheetName is false</exception>
            <exception cref="T:PicoXLSX.FormatException">FormatException is thrown if the worksheet name contains illegal characters or is out of range (length between 1 an 31) and sanitizeSheetName is false</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.AddWorksheet(PicoXLSX.Worksheet)">
            <summary>
            Adding a new Worksheet. The new worksheet will be defined as current worksheet
            </summary>
            <param name="worksheet">Prepared worksheet object</param>
            <exception cref="T:PicoXLSX.WorksheetException">WorksheetException is thrown if the name of the worksheet already exists</exception>
            <exception cref="T:PicoXLSX.FormatException">FormatException is thrown if the worksheet name contains illegal characters or is out of range (length between 1 an 31</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.Init">
            <summary>
            Init method called in the constructors
            </summary>
        </member>
        <member name="M:PicoXLSX.Workbook.RemoveStyle(PicoXLSX.Style)">
            <summary>
            Removes the passed style from the style sheet
            </summary>
            <param name="style">Style to remove</param>
            <exception cref="T:PicoXLSX.StyleException">Throws an StyleException if the style was not found in the style collection (could not be referenced)</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.RemoveStyle(System.String)">
            <summary>
            Removes the defined style from the style sheet of the workbook
            </summary>
            <param name="styleName">Name of the style to be removed</param>
            <exception cref="T:PicoXLSX.StyleException">Throws an StyleException if the style was not found in the style collection (could not be referenced)</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.RemoveStyle(PicoXLSX.Style,System.Boolean)">
            <summary>
            Removes the defined style from the style sheet of the workbook
            </summary>
            <param name="style">Style to remove</param>
            <param name="onlyIfUnused">If true, the style will only be removed if not used in any cell</param>
            <exception cref="T:PicoXLSX.StyleException">Throws an StyleException if the style was not found in the style collection (could not be referenced)</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.RemoveStyle(System.String,System.Boolean)">
            <summary>
            Removes the defined style from the style sheet of the workbook
            </summary>
            <param name="styleName">Name of the style to be removed</param>
            <param name="onlyIfUnused">If true, the style will only be removed if not used in any cell</param>
            <exception cref="T:PicoXLSX.StyleException">Throws an UndefinedStyleException if the style was not found in the style collection (could not be referenced)</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.RemoveWorksheet(System.String)">
            <summary>
            Removes the defined worksheet
            </summary>
            <param name="name">Name of the worksheet</param>
            <exception cref="T:PicoXLSX.WorksheetException">Throws a UnknownWorksheetException if the name of the worksheet is unknown</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.ResolveMergedCells">
            <summary>
            Method to resolve all merged cells in all worksheets. Only the value of the very first cell of the locked cells range will be visible. The other values are still present (set to EMPTY) but will not be stored in the worksheet.
            </summary>
            <exception cref="T:PicoXLSX.StyleException">Throws an StyleException if one of the styles of the merged cells cannot be referenced or is null</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.Save">
            <summary>
            Saves the workbook
            </summary>
            <exception cref="T:PicoXLSX.IOException">Throws IOException in case of an error</exception>
            <exception cref="T:PicoXLSX.RangeException">Throws a RangeException if the start or end address of a handled cell range was out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if a handled date cannot be translated to (Excel internal) OADate</exception>
            <exception cref="T:PicoXLSX.StyleException">Throws a StyleException if one of the styles of the workbook cannot be referenced or is null</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.SaveAsync">
            <summary>
            Saves the workbook asynchronous.
            </summary>
            <returns>Task object (void)</returns>
            <exception cref="T:PicoXLSX.IOException">May throw an IOException in case of an error. The asynchronous operation may hide the exception.</exception>
            <exception cref="T:PicoXLSX.RangeException">May throw a RangeException if the start or end address of a handled cell range was out of range. The asynchronous operation may hide the exception.</exception>
            <exception cref="T:PicoXLSX.FormatException">May throw a FormatException if a handled date cannot be translated to (Excel internal) OADate. The asynchronous operation may hide the exception.</exception>
            <exception cref="T:PicoXLSX.StyleException">May throw a StyleException if one of the styles of the workbook cannot be referenced or is null. The asynchronous operation may hide the exception.</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.SaveAs(System.String)">
            <summary>
            Saves the workbook with the defined name
            </summary>
            <param name="fileName">fileName of the saved workbook</param>
            <exception cref="T:PicoXLSX.IOException">Throws IOException in case of an error</exception>
            <exception cref="T:PicoXLSX.RangeException">Throws a RangeException if the start or end address of a handled cell range was out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if a handled date cannot be translated to (Excel internal) OADate</exception>
            <exception cref="T:PicoXLSX.StyleException">Throws a StyleException if one of the styles of the workbook cannot be referenced or is null</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.SaveAsAsync(System.String)">
            <summary>
            Saves the workbook with the defined name asynchronous.
            </summary>
            <param name="fileName">fileName of the saved workbook</param>
            <returns>Task object (void)</returns>
            <exception cref="T:PicoXLSX.IOException">May throw an IOException in case of an error. The asynchronous operation may hide the exception.</exception>
            <exception cref="T:PicoXLSX.RangeException">May throw a RangeException if the start or end address of a handled cell range was out of range. The asynchronous operation may hide the exception.</exception>
            <exception cref="T:PicoXLSX.FormatException">May throw a FormatException if a handled date cannot be translated to (Excel internal) OADate. The asynchronous operation may hide the exception.</exception>
            <exception cref="T:PicoXLSX.StyleException">May throw a StyleException if one of the styles of the workbook cannot be referenced or is null. The asynchronous operation may hide the exception.</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.SaveAsStream(System.IO.Stream)">
            <summary>
            Save the workbook to a writable stream
            </summary>
            <param name="stream">Writable stream</param>
            <exception cref="T:PicoXLSX.IOException">Throws IOException in case of an error</exception>
            <exception cref="T:PicoXLSX.RangeException">Throws a RangeException if the start or end address of a handled cell range was out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if a handled date cannot be translated to (Excel internal) OADate</exception>
            <exception cref="T:PicoXLSX.StyleException">Throws a StyleException if one of the styles of the workbook cannot be referenced or is null</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.SaveAsStreamAsync(System.IO.Stream)">
            <summary>
            Save the workbook to a writable stream asynchronous.
            </summary>
            <param name="stream">>Writable stream</param>
            <returns>Task object (void)</returns>
            <exception cref="T:PicoXLSX.IOException">Throws IOException in case of an error. The asynchronous operation may hide the exception.</exception>
            <exception cref="T:PicoXLSX.RangeException">May throw a RangeException if the start or end address of a handled cell range was out of range. The asynchronous operation may hide the exception.</exception>
            <exception cref="T:PicoXLSX.FormatException">May throw a FormatException if a handled date cannot be translated to (Excel internal) OADate. The asynchronous operation may hide the exception.</exception>
            <exception cref="T:PicoXLSX.StyleException">May throw a StyleException if one of the styles of the workbook cannot be referenced or is null. The asynchronous operation may hide the exception.</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.SetCurrentWorksheet(System.String)">
            <summary>
            Sets the current worksheet
            </summary>
            <param name="name">Name of the worksheet</param>
            <returns>Returns the current worksheet</returns>
            <exception cref="T:PicoXLSX.WorksheetException">Throws a MissingReferenceException if the name of the worksheet is unknown</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.SetSelectedWorksheet(System.Int32)">
            <summary>
            Sets the selected worksheet in the output workbook
            </summary>
            <remarks>This method does not set the current worksheet while design time. Use SetCurrentWorksheet instead for this</remarks>
            <param name="worksheetIndex">Zero-based worksheet index</param>
            <exception cref="T:PicoXLSX.RangeException">Throws a OutOfRangeException if the index of the worksheet is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Workbook.SetWorkbookProtection(System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Sets or removes the workbook protection. If protectWindows and protectStructure are both false, the workbook will not be protected
            </summary>
            <param name="state">If true, the workbook will be protected, otherwise not</param>
            <param name="protectWindows">If true, the windows will be locked if the workbook is protected</param>
            <param name="protectStructure">If true, the structure will be locked if the workbook is protected</param>
            <param name="password">Optional password. If null or empty, no password will be set in case of protection</param>
        </member>
        <member name="M:PicoXLSX.Workbook.SetSelectedWorksheet(PicoXLSX.Worksheet)">
            <summary>
            Sets the selected worksheet in the output workbook
            </summary>
            <remarks>This method does not set the current worksheet while design time. Use SetCurrentWorksheet instead for this</remarks>
            <param name="worksheet">Worksheet object (must be in the collection of worksheets)</param>
            <exception cref="T:PicoXLSX.WorksheetException">Throws a UnknownWorksheetException if the worksheet was not found in the worksheet collection</exception>
        </member>
        <member name="T:PicoXLSX.Workbook.Shortener">
            <summary>
            Class to provide access to the current worksheet with a shortened syntax. Note: The WS object can be null if the workbook was created without a worksheet. The object will be available as soon as the current worksheet is defined
            </summary>
        </member>
        <member name="M:PicoXLSX.Workbook.Shortener.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.Workbook.Shortener.SetCurrentWorksheet(PicoXLSX.Worksheet)">
            <summary>
            Sets the worksheet accessed by the shortener
            </summary>
            <param name="worksheet">Current worksheet</param>
        </member>
        <member name="M:PicoXLSX.Workbook.Shortener.Value(System.Object)">
            <summary>
            Sets a value into the current cell and moves the cursor to the next cell (column or row depending on the defined cell direction)
            </summary>
            <exception cref="T:PicoXLSX.WorksheetException">Throws a WorksheetException if no worksheet was defined</exception>
            <param name="value">Value to set</param>
        </member>
        <member name="M:PicoXLSX.Workbook.Shortener.Value(System.Object,PicoXLSX.Style)">
            <summary>
            Sets a value with style into the current cell and moves the cursor to the next cell (column or row depending on the defined cell direction)
            </summary>
            <exception cref="T:PicoXLSX.WorksheetException">Throws a WorksheetException if no worksheet was defined</exception>
            <param name="value">Value to set</param>
            <param name="style">Style to apply</param>
        </member>
        <member name="M:PicoXLSX.Workbook.Shortener.Formula(System.String)">
            <summary>
            Sets a formula into the current cell and moves the cursor to the next cell (column or row depending on the defined cell direction)
            </summary>
            <exception cref="T:PicoXLSX.WorksheetException">Throws a WorksheetException if no worksheet was defined</exception>
            <param name="formula">Formula to set</param>
        </member>
        <member name="M:PicoXLSX.Workbook.Shortener.Formula(System.String,PicoXLSX.Style)">
            <summary>
            Sets a formula with style into the current cell and moves the cursor to the next cell (column or row depending on the defined cell direction)
            </summary>
            <exception cref="T:PicoXLSX.WorksheetException">Throws a WorksheetException if no worksheet was defined</exception>
            <param name="formula">Formula to set</param>
            <param name="style">Style to apply</param>
        </member>
        <member name="M:PicoXLSX.Workbook.Shortener.Down">
            <summary>
            Moves the cursor one row down
            </summary>
        </member>
        <member name="M:PicoXLSX.Workbook.Shortener.Down(System.Int32)">
            <summary>
            Moves the cursor the number of defined rows down
            </summary>
            <param name="numberOfRows">Number of rows to move</param>
        </member>
        <member name="M:PicoXLSX.Workbook.Shortener.Right">
            <summary>
            Moves the cursor one column to the right
            </summary>
        </member>
        <member name="M:PicoXLSX.Workbook.Shortener.Right(System.Int32)">
            <summary>
            Moves the cursor the number of defined columns to the right
            </summary>
            <param name="numberOfColumns">Number of columns to move</param>
        </member>
        <member name="M:PicoXLSX.Workbook.Shortener.NullCheck">
            <summary>
            Internal method to check whether the worksheet is null
            </summary>
        </member>
        <member name="T:PicoXLSX.Worksheet">
            <summary>
            Class representing a worksheet of a workbook
            </summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.DEFAULT_COLUMN_WIDTH">
            <summary>
            Default column width as constant
            </summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.DEFAULT_ROW_HEIGHT">
            <summary>
            Default row height as constant
            </summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.MAX_COLUMN_NUMBER">
            <summary>
            Maximum column number (zero-based) as constant
            </summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.MIN_COLUMN_NUMBER">
            <summary>
            Minimum column number (zero-based) as constant
            </summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.MIN_COLUMN_WIDTH">
            <summary>
            Minimum column width as constant
            </summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.MIN_ROW_HEIGHT">
            <summary>
            Minimum row height as constant
            </summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.MAX_COLUMN_WIDTH">
            <summary>
            Maximum column width as constant
            </summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.MAX_ROW_NUMBER">
            <summary>
            Maximum row number (zero-based) as constant
            </summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.MIN_ROW_NUMBER">
            <summary>
            Minimum row number (zero-based) as constant
            </summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.MAX_ROW_HEIGHT">
            <summary>
            Maximum row height as constant
            </summary>
        </member>
        <member name="T:PicoXLSX.Worksheet.CellDirection">
            <summary>
            Enum to define the direction when using AddNextCell method
            </summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.CellDirection.ColumnToColumn">
            <summary>The next cell will be on the same row (A1,B1,C1...)</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.CellDirection.RowToRow">
            <summary>The next cell will be on the same column (A1,A2,A3...)</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.CellDirection.Disabled">
            <summary>The address of the next cell will be not changed when adding a cell (for manual definition of cell addresses)</summary>
        </member>
        <member name="T:PicoXLSX.Worksheet.SheetProtectionValue">
            <summary>
            Enum to define the possible protection types when protecting a worksheet
            </summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.objects">
            <summary>If selected, the user can edit objects if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.scenarios">
            <summary>If selected, the user can edit scenarios if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.formatCells">
            <summary>If selected, the user can format cells if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.formatColumns">
            <summary>If selected, the user can format columns if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.formatRows">
            <summary>If selected, the user can format rows if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.insertColumns">
            <summary>If selected, the user can insert columns if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.insertRows">
            <summary>If selected, the user can insert rows if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.insertHyperlinks">
            <summary>If selected, the user can insert hyper links if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.deleteColumns">
            <summary>If selected, the user can delete columns if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.deleteRows">
            <summary>If selected, the user can delete rows if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.selectLockedCells">
            <summary>If selected, the user can select locked cells if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.sort">
            <summary>If selected, the user can sort cells if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.autoFilter">
            <summary>If selected, the user can use auto filters if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.pivotTables">
            <summary>If selected, the user can use pivot tables if the worksheets is protected</summary>
        </member>
        <member name="F:PicoXLSX.Worksheet.SheetProtectionValue.selectUnlockedCells">
            <summary>If selected, the user can select unlocked cells if the worksheets is protected</summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.AutoFilterRange">
            <summary>
            Gets the range of the auto-filter. Wrapped to Nullable to provide null as value. If null, no auto-filter is applied
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.Cells">
            <summary>
            Gets the cells of the worksheet as dictionary with the cell address as key and the cell object as value
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.Columns">
            <summary>
            Gets all columns with non-standard properties, like auto filter applied or a special width as dictionary with the zero-based column index as key and the column object as value
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.CurrentCellDirection">
            <summary>
            Gets or sets the direction when using AddNextCell method
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.DefaultColumnWidth">
            <summary>
            Gets or sets the default column width
            </summary>
            <exception cref="T:PicoXLSX.RangeException">Throws a RangeException exception if the passed width is out of range (set)</exception>
        </member>
        <member name="P:PicoXLSX.Worksheet.DefaultRowHeight">
            <summary>
            Gets or sets the default Row height
            </summary>
            <exception cref="T:PicoXLSX.RangeException">Throws a RangeException exception if the passed height is out of range (set)</exception>
        </member>
        <member name="P:PicoXLSX.Worksheet.HiddenRows">
            <summary>
            Gets the hidden rows as dictionary with the zero-based row number as key and a boolean as value. True indicates hidden, false visible.
            </summary>
            <remarks>Entries with the value false are not affecting the worksheet. These entries can be removed</remarks>
        </member>
        <member name="P:PicoXLSX.Worksheet.MergedCells">
            <summary>
            Gets the merged cells (only references) as dictionary with the cell address as key and the range object as value
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.RowHeights">
            <summary>
            Gets defined row heights as dictionary with the zero-based row number as key and the height (float from 0 to 409.5) as value
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.SelectedCells">
            <summary>
            Gets the cell range of selected cells of this worksheet. Null if no cells are selected
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.SheetID">
            <summary>
            Gets or sets the internal ID of the sheet
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.SheetName">
            <summary>
            Gets or sets the name of the worksheet
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.SheetProtectionPassword">
            <summary>
            Gets the password used for sheet protection
            </summary>
            <see cref="M:PicoXLSX.Worksheet.SetSheetProtectionPassword(System.String)"/>
        </member>
        <member name="P:PicoXLSX.Worksheet.SheetProtectionValues">
            <summary>
            Gets the list of SheetProtectionValues. These values define the allowed actions if the worksheet is protected
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.UseSheetProtection">
            <summary>
            Gets or sets whether the worksheet is protected. If true, protection is enabled
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.WorkbookReference">
            <summary>
            Gets or sets the Reference to the parent Workbook
            </summary>
        </member>
        <member name="M:PicoXLSX.Worksheet.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.Worksheet.#ctor(System.String,System.Int32,PicoXLSX.Workbook)">
            <summary>
            Constructor with name and sheet ID
            </summary>
            <param name="name">Name of the worksheet</param>
            <param name="id">ID of the worksheet (for internal use)</param>
            <param name="reference">Reference to the parent Workbook</param>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddNextCell(System.Object)">
            <summary>
            Adds an object to the next cell position. If the type of the value does not match with one of the supported data types, it will be casted to a String. A prepared object of the type Cell will not be casted but adjusted
            </summary>
            <remarks>Recognized are the following data types: Cell (prepared object), string, int, double, float, long, DateTime, bool. All other types will be casted into a string using the default ToString() method</remarks>
            <param name="value">Unspecified value to insert</param>
            <exception cref="T:PicoXLSX.RangeException">Throws a RangeException if the next cell is out of range (on row or column)</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddNextCell(System.Object,PicoXLSX.Style)">
            <summary>
            Adds an object to the next cell position. If the type of the value does not match with one of the supported data types, it will be casted to a String. A prepared object of the type Cell will not be casted but adjusted
            </summary>
            <remarks>Recognized are the following data types: Cell (prepared object), string, int, double, float, long, DateTime, bool. All other types will be casted into a string using the default ToString() method</remarks>
            <param name="value">Unspecified value to insert</param>
            <param name="style">Style object to apply on this cell</param>
            <exception cref="T:PicoXLSX.RangeException">Throws a RangeException if the next cell is out of range (on row or column)</exception>
            <exception cref="T:PicoXLSX.StyleException">Throws a StyleException if the default style was malformed</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddNextCell(PicoXLSX.Cell,System.Boolean,PicoXLSX.Style)">
            <summary>
            Method to insert a generic cell to the next cell position
            </summary>
            <param name="cell">Cell object to insert</param>
            <param name="incremental">If true, the address value (row or column) will be incremented, otherwise not</param>
            <param name="style">If not null, the defined style will be applied to the cell, otherwise no style or the default style will be applied</param>
            <remarks>Recognized are the following data types: string, int, double, float, long, DateTime, bool. All other types will be casted into a string using the default ToString() method</remarks>
            <exception cref="T:PicoXLSX.StyleException">Throws a StyleException if the default style was malformed or if the active style cannot be referenced</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.CastValue(System.Object,System.Int32,System.Int32)">
            <summary>
            Method to cast a value or align an object of the type Cell to the context of the worksheet
            </summary>
            <param name="value">Unspecified value or object of the type Cell</param>
            <param name="column">Column index</param>
            <param name="row">Row index</param>
            <returns>Cell object</returns>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddCell(System.Object,System.Int32,System.Int32)">
            <summary>
            Adds an object to the defined cell address. If the type of the value does not match with one of the supported data types, it will be casted to a String. A prepared object of the type Cell will not be casted but adjusted
            </summary>
            <param name="value">Unspecified value to insert</param>
            <param name="columnAddress">Column number (zero based)</param>
            <param name="rowAddress">Row number (zero based)</param>
            <remarks>Recognized are the following data types: Cell (prepared object), string, int, double, float, long, DateTime, bool. All other types will be casted into a string using the default ToString() method</remarks>
            <exception cref="T:PicoXLSX.StyleException">Throws an UndefinedStyleException if the active style cannot be referenced while creating the cell</exception>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the passed cell address is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddCell(System.Object,System.Int32,System.Int32,PicoXLSX.Style)">
            <summary>
            Adds an object to the defined cell address. If the type of the value does not match with one of the supported data types, it will be casted to a String. A prepared object of the type Cell will not be casted but adjusted
            </summary>
            <param name="value">Unspecified value to insert</param>
            <param name="columnAddress">Column number (zero based)</param>
            <param name="rowAddress">Row number (zero based)</param>
            <param name="style">Style to apply on the cell</param>
            <remarks>Recognized are the following data types: Cell (prepared object), string, int, double, float, long, DateTime, bool. All other types will be casted into a string using the default ToString() method</remarks>
            <exception cref="T:PicoXLSX.StyleException">Throws an UndefinedStyleException if the passed style is malformed</exception>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the passed cell address is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddCell(System.Object,System.String)">
            <summary>
            Adds an object to the defined cell address. If the type of the value does not match with one of the supported data types, it will be casted to a String. A prepared object of the type Cell will not be casted but adjusted
            </summary>
            <param name="value">Unspecified value to insert</param>
            <param name="address">Cell address in the format A1 - XFD1048576</param>
            <remarks>Recognized are the following data types: Cell (prepared object), string, int, double, float, long, DateTime, bool. All other types will be casted into a string using the default ToString() method</remarks>
            <exception cref="T:PicoXLSX.StyleException">Throws an UndefinedStyleException if the active style cannot be referenced while creating the cell</exception>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the passed cell address is out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the passed cell address is malformed</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddCell(System.Object,System.String,PicoXLSX.Style)">
            <summary>
            Adds an object to the defined cell address. If the type of the value does not match with one of the supported data types, it will be casted to a String. A prepared object of the type Cell will not be casted but adjusted
            </summary>
            <param name="value">Unspecified value to insert</param>
            <param name="address">Cell address in the format A1 - XFD1048576</param>
            <param name="style">Style to apply on the cell</param>
            <remarks>Recognized are the following data types: Cell (prepared object), string, int, double, float, long, DateTime, bool. All other types will be casted into a string using the default ToString() method</remarks>
            <exception cref="T:PicoXLSX.StyleException">Throws an UndefinedStyleException if the passed style is malformed</exception>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the passed cell address is out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the passed cell address is malformed</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddCellFormula(System.String,System.String)">
            <summary>
            Adds a cell formula as string to the defined cell address
            </summary>
            <param name="formula">Formula to insert</param>
            <param name="address">Cell address in the format A1 - XFD1048576</param>
            <exception cref="T:PicoXLSX.StyleException">Throws an UndefinedStyleException if the active style cannot be referenced while creating the cell</exception>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the passed cell address is out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the passed cell address is malformed</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddCellFormula(System.String,System.String,PicoXLSX.Style)">
            <summary>
            Adds a cell formula as string to the defined cell address
            </summary>
            <param name="formula">Formula to insert</param>
            <param name="address">Cell address in the format A1 - XFD1048576</param>
            <param name="style">Style to apply on the cell</param>
            <exception cref="T:PicoXLSX.StyleException">Throws an UndefinedStyleException if the passed style was malformed</exception>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the passed cell address is out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the passed cell address is malformed</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddCellFormula(System.String,System.Int32,System.Int32)">
            <summary>
            Adds a cell formula as string to the defined cell address
            </summary>
            <param name="formula">Formula to insert</param>
            <param name="columnAddress">Column number (zero based)</param>
            <param name="rowAddress">Row number (zero based)</param>
            <exception cref="T:PicoXLSX.StyleException">Throws an UndefinedStyleException if the active style cannot be referenced while creating the cell</exception>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the passed cell address is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddCellFormula(System.String,System.Int32,System.Int32,PicoXLSX.Style)">
            <summary>
            Adds a cell formula as string to the defined cell address
            </summary>
            <param name="formula">Formula to insert</param>
            <param name="columnAddress">Column number (zero based)</param>
            <param name="rowAddress">Row number (zero based)</param>
            <param name="style">Style to apply on the cell</param>
            <exception cref="T:PicoXLSX.StyleException">Throws an UndefinedStyleException if the active style cannot be referenced while creating the cell</exception>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the passed cell address is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddNextCellFormula(System.String)">
            <summary>
            Adds a formula as string to the next cell position
            </summary>
            <param name="formula">Formula to insert</param>
            <exception cref="T:PicoXLSX.StyleException">Throws an UndefinedStyleException if the active style cannot be referenced while creating the cell</exception>
            <exception cref="T:PicoXLSX.RangeException">Trows a RangeException if the next cell is out of range (on row or column)</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddNextCellFormula(System.String,PicoXLSX.Style)">
            <summary>
            Adds a formula as string to the next cell position
            </summary>
            <param name="formula">Formula to insert</param>
            <param name="style">Style to apply on the cell</param>
            <exception cref="T:PicoXLSX.StyleException">Throws an UndefinedStyleException if the active style cannot be referenced while creating the cell</exception>
            <exception cref="T:PicoXLSX.RangeException">Trows a RangeException if the next cell is out of range (on row or column)</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddCellRange(System.Collections.Generic.List{System.Object},PicoXLSX.Cell.Address,PicoXLSX.Cell.Address)">
            <summary>
            Adds a list of object values to a defined cell range. If the type of the a particular value does not match with one of the supported data types, it will be casted to a String. Prepared objects of the type Cell will not be casted but adjusted
            </summary>
            <param name="values">List of unspecified objects to insert</param>
            <param name="startAddress">Start address</param>
            <param name="endAddress">End address</param>
            <remarks>The data types in the passed list can be mixed. Recognized are the following data types: string, int, double, float, long, DateTime, bool. All other types will be casted into a string using the default ToString() method</remarks>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the number of cells resolved from the range differs from the number of passed values</exception>
            <exception cref="T:PicoXLSX.StyleException">Throws an UndefinedStyleException if the active style cannot be referenced while creating the cells</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddCellRange(System.Collections.Generic.List{System.Object},PicoXLSX.Cell.Address,PicoXLSX.Cell.Address,PicoXLSX.Style)">
            <summary>
            Adds a list of object values to a defined cell range. If the type of the a particular value does not match with one of the supported data types, it will be casted to a String. Prepared objects of the type Cell will not be casted but adjusted
            </summary>
            <param name="values">List of unspecified objects to insert</param>
            <param name="startAddress">Start address</param>
            <param name="endAddress">End address</param>
            <param name="style">Style to apply on the all cells of the range</param>
            <remarks>The data types in the passed list can be mixed. Recognized are the following data types: Cell (prepared object), string, int, double, float, long, DateTime, bool. All other types will be casted into a string using the default ToString() method</remarks>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the number of cells resolved from the range differs from the number of passed values</exception>
            <exception cref="T:PicoXLSX.StyleException">Throws an UndefinedStyleException if the passed style is malformed</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddCellRange(System.Collections.Generic.List{System.Object},System.String)">
            <summary>
            Adds a list of object values to a defined cell range. If the type of the a particular value does not match with one of the supported data types, it will be casted to a String. Prepared objects of the type Cell will not be casted but adjusted
            </summary>
            <param name="values">List of unspecified objects to insert</param>
            <param name="cellRange">Cell range as string in the format like A1:D1 or X10:X22</param>
            <remarks>The data types in the passed list can be mixed. Recognized are the following data types: Cell (prepared object), string, int, double, float, long, DateTime, bool. All other types will be casted into a string using the default ToString() method</remarks>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the number of cells resolved from the range differs from the number of passed values</exception>
            <exception cref="T:PicoXLSX.StyleException">Throws an UndefinedStyleException if the active style cannot be referenced while creating the cells</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the passed cell range is malformed</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddCellRange(System.Collections.Generic.List{System.Object},System.String,PicoXLSX.Style)">
            <summary>
            Adds a list of object values to a defined cell range. If the type of the a particular value does not match with one of the supported data types, it will be casted to a String. Prepared objects of the type Cell will not be casted but adjusted
            </summary>
            <param name="values">List of unspecified objects to insert</param>
            <param name="cellRange">Cell range as string in the format like A1:D1 or X10:X22</param>
            <param name="style">Style to apply on the all cells of the range</param>
            <remarks>The data types in the passed list can be mixed. Recognized are the following data types: Cell (prepared object), string, int, double, float, long, DateTime, bool. All other types will be casted into a string using the default ToString() method</remarks>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the number of cells resolved from the range differs from the number of passed values</exception>
            <exception cref="T:PicoXLSX.StyleException">Throws an UndefinedStyleException if the passed style is malformed</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the passed cell range is malformed</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddCellRangeInternal``1(System.Collections.Generic.List{``0},PicoXLSX.Cell.Address,PicoXLSX.Cell.Address,PicoXLSX.Style)">
            <summary>
            Internal function to add a generic list of value to the defined cell range
            </summary>
            <typeparam name="T">Data type of the generic value list</typeparam>
            <param name="values">List of values</param>
            <param name="startAddress">Start address</param>
            <param name="endAddress">End address</param>
            <param name="style">Style to apply on the all cells of the range</param>
            <remarks>The data types in the passed list can be mixed. Recognized are the following data types: Cell (prepared object), string, int, double, float, long, DateTime, bool. All other types will be casted into a string using the default ToString() method</remarks>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the number of cells differs from the number of passed values</exception>
            <exception cref="T:PicoXLSX.StyleException">Throws an StyleException if the active style cannot be referenced while creating the cells</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.RemoveCell(System.Int32,System.Int32)">
            <summary>
            Removes a previous inserted cell at the defined address
            </summary>
            <param name="columnAddress">Column number (zero based)</param>
            <param name="rowAddress">Row number (zero based)</param>
            <returns>Returns true if the cell could be removed (existed), otherwise false (did not exist)</returns>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the passed cell address is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.RemoveCell(System.String)">
            <summary>
            Removes a previous inserted cell at the defined address
            </summary>
            <param name="address">Cell address in the format A1 - XFD1048576</param>
            <returns>Returns true if the cell could be removed (existed), otherwise false (did not exist)</returns>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the passed cell address is out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the passed cell address is malformed</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddAllowedActionOnSheetProtection(PicoXLSX.Worksheet.SheetProtectionValue)">
            <summary>
            Method to add allowed actions if the worksheet is protected. If one or more values are added, UseSheetProtection will be set to true
            </summary>
            <param name="typeOfProtection">Allowed action on the worksheet or cells</param>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddHiddenColumn(System.Int32)">
            <summary>
            Sets the defined column as hidden
            </summary>
            <param name="columnNumber">Column number to hide on the worksheet</param>
            <exception cref="T:PicoXLSX.RangeException">Throws a RangeException if the passed column number is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddHiddenColumn(System.String)">
            <summary>
            Sets the defined column as hidden
            </summary>
            <param name="columnAddress">Column address to hide on the worksheet</param>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the passed column address is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.AddHiddenRow(System.Int32)">
            <summary>
            Sets the defined row as hidden
            </summary>
            <param name="rowNumber">Row number to hide on the worksheet</param>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the passed row number is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.ClearActiveStyle">
            <summary>
            Clears the active style of the worksheet. All later added calls will contain no style unless another active style is set
            </summary>
        </member>
        <member name="M:PicoXLSX.Worksheet.GetCell(PicoXLSX.Cell.Address)">
            <summary>
            Gets the cell of the specified address
            </summary>
            <param name="address">Address of the cell</param>
            <returns>Cell object</returns>
            <exception cref="T:PicoXLSX.WorksheetException">Trows a WorksheetException if the cell was not found on the cell table of this worksheet</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.GetCell(System.Int32,System.Int32)">
            <summary>
            Gets the cell of the specified column and row number (zero-based)
            </summary>
            <param name="columnNumber">Column number of the cell</param>
            <param name="rowNumber">Row number of the cell</param>
            <returns>Cell object</returns>
            <exception cref="T:PicoXLSX.WorksheetException">Trows a WorksheetException if the cell was not found on the cell table of this worksheet</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.HasCell(PicoXLSX.Cell.Address)">
            <summary>
            Gets whether the specified address exists in the worksheet. Existing means that a value was stored at the address
            </summary>
            <param name="address">Address to check</param>
            <returns>
              <c>true</c> if the cell exists, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:PicoXLSX.Worksheet.HasCell(System.Int32,System.Int32)">
            <summary>
            Gets whether the specified address exists in the worksheet. Existing means that a value was stored at the address
            </summary>
            <param name="columnNumber">Column number of the cell to check (zero-based)</param>
            <param name="rowNumber">Row number of the cell to check (zero-based)</param>
            <returns>
              <c>true</c> if the cell exists, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:PicoXLSX.Worksheet.GetLastColumnNumber">
            <summary>
            Gets the last existing column number in the current worksheet (zero-based)
            </summary>
            <returns>Zero-based column number. In case of a empty worksheet, -1 will be returned</returns>
        </member>
        <member name="M:PicoXLSX.Worksheet.GetLastRowNumber">
            <summary>
            Gets the last existing row number in the current worksheet (zero-based)
            </summary>
            <returns>Zero-based row number. In case of a empty worksheet, -1 will be returned</returns>
        </member>
        <member name="M:PicoXLSX.Worksheet.GetLastAddress(System.Boolean)">
            <summary>
            Gets the last existing row or column number of the current worksheet (zero-based)
            </summary>
            <param name="column">If true, the output will be the last column, otherwise the last row</param>
            <returns>Last row or column number (zero-based)</returns>
        </member>
        <member name="M:PicoXLSX.Worksheet.GetCurrentColumnNumber">
            <summary>
            Gets the current column number (zero based)
            </summary>
            <returns>Column number (zero-based)</returns>
        </member>
        <member name="M:PicoXLSX.Worksheet.GetCurrentRowNumber">
            <summary>
            Gets the current row number (zero based)
            </summary>
            <returns>Row number (zero-based)</returns>
        </member>
        <member name="M:PicoXLSX.Worksheet.GoToNextColumn">
            <summary>
            Moves the current position to the next column
            </summary>
        </member>
        <member name="M:PicoXLSX.Worksheet.GoToNextColumn(System.Int32)">
            <summary>
            Moves the current position to the next column with the number of cells to move
            </summary>
            <param name="numberOfColumns">Number of columns to move</param>
        </member>
        <member name="M:PicoXLSX.Worksheet.GoToNextRow">
            <summary>
            Moves the current position to the next row (use for a new line)
            </summary>
        </member>
        <member name="M:PicoXLSX.Worksheet.GoToNextRow(System.Int32)">
            <summary>
            Moves the current position to the next row with the number of cells to move (use for a new line)
            </summary>
            <param name="numberOfRows">Number of rows to move</param>
        </member>
        <member name="M:PicoXLSX.Worksheet.MergeCells(PicoXLSX.Cell.Range)">
            <summary>
            Merges the defined cell range
            </summary>
            <param name="cellRange">Range to merge</param>
            <returns>Returns the validated range of the merged cells (e.g. 'A1:B12')</returns>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the passed cell range is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.MergeCells(System.String)">
            <summary>
            Merges the defined cell range
            </summary>
            <param name="cellRange">Range to merge (e.g. 'A1:B12')</param>
            <returns>Returns the validated range of the merged cells (e.g. 'A1:B12')</returns>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the passed cell range is out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the passed cell range is malformed</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.MergeCells(PicoXLSX.Cell.Address,PicoXLSX.Cell.Address)">
            <summary>
            Merges the defined cell range
            </summary>
            <param name="startAddress">Start address of the merged cell range</param>
            <param name="endAddress">End address of the merged cell range</param>
            <returns>Returns the validated range of the merged cells (e.g. 'A1:B12')</returns>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if one of the passed cell addresses is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.RecalculateAutoFilter">
            <summary>
            Method to recalculate the auto filter (columns) of this worksheet. This is an internal method. There is no need to use it. It must be public to require access from the LowLevel class
            </summary>
        </member>
        <member name="M:PicoXLSX.Worksheet.RecalculateColumns">
            <summary>
            Method to recalculate the collection of columns of this worksheet. This is an internal method. There is no need to use it. It must be public to require access from the LowLevel class
            </summary>
        </member>
        <member name="M:PicoXLSX.Worksheet.RemoveAutoFilter">
            <summary>
            Removes auto filters from the worksheet
            </summary>
        </member>
        <member name="M:PicoXLSX.Worksheet.RemoveHiddenColumn(System.Int32)">
            <summary>
            Sets a previously defined, hidden column as visible again
            </summary>
            <param name="columnNumber">Column number to make visible again</param>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the passed column number is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.RemoveHiddenColumn(System.String)">
            <summary>
            Sets a previously defined, hidden column as visible again
            </summary>
            <param name="columnAddress">Column address to make visible again</param>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the column address out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.RemoveHiddenRow(System.Int32)">
            <summary>
            Sets a previously defined, hidden row as visible again
            </summary>
            <param name="rowNumber">Row number to hide on the worksheet</param>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the passed row number is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.RemoveMergedCells(System.String)">
            <summary>
            Removes the defined merged cell range
            </summary>
            <param name="range">Cell range to remove the merging</param>
            <exception cref="T:PicoXLSX.RangeException">Throws a UnkownRangeException if the passed cell range was not merged earlier</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.RemoveSelectedCells">
            <summary>
            Removes the cell selection of this worksheet
            </summary>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetActiveStyle(PicoXLSX.Style)">
            <summary>
            Sets the active style of the worksheet. This style will be assigned to all later added cells
            </summary>
            <param name="style">Style to set as active style</param>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetAutoFilter(System.Int32,System.Int32)">
            <summary>
            Sets the column auto filter within the defined column range
            </summary>
            <param name="startColumn">Column number with the first appearance of an auto filter drop down</param>
            <param name="endColumn">Column number with the last appearance of an auto filter drop down</param>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the start or end address out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetAutoFilter(System.String)">
            <summary>
            Sets the column auto filter within the defined column range
            </summary>
            <param name="range">Range to apply auto filter on. The range could be 'A1:C10' for instance. The end row will be recalculated automatically when saving the file</param>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the passed range out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws an FormatException if the passed range is malformed</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetColumnHiddenState(System.Int32,System.Boolean)">
            <summary>
            Sets the defined column as hidden or visible
            </summary>
            <param name="columnNumber">Column number to hide on the worksheet</param>
            <param name="state">If true, the column will be hidden, otherwise be visible</param>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the column number out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetColumnWidth(System.String,System.Single)">
            <summary>
            Sets the width of the passed column address
            </summary>
            <param name="columnAddress">Column address (A - XFD)</param>
            <param name="width">Width from 0 to 255.0</param>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException:<br></br>a) If the passed column address is out of range<br></br>b) if the column width is out of range (0 - 255.0)</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetColumnWidth(System.Int32,System.Single)">
            <summary>
            Sets the width of the passed column number (zero-based)
            </summary>
            <param name="columnNumber">Column number (zero-based, from 0 to 16383)</param>
            <param name="width">Width from 0 to 255.0</param>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException:<br></br>a) If the passed column number is out of range<br></br>b) if the column width is out of range (0 - 255.0)</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetCurrentCellAddress(System.Int32,System.Int32)">
            <summary>
            Set the current cell address
            </summary>
            <param name="columnAddress">Column number (zero based)</param>
            <param name="rowAddress">Row number (zero based)</param>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if one of the passed cell addresses is out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetCurrentCellAddress(System.String)">
            <summary>
            Set the current cell address
            </summary>
            <param name="address">Cell address in the format A1 - XFD1048576</param>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the passed cell address is out of range</exception>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the passed cell address is malformed</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetCurrentColumnNumber(System.Int32)">
            <summary>
            Sets the current column number (zero based)
            </summary>
            <param name="columnNumber">Column number (zero based)</param>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the number is out of the valid range. Range is from 0 to 16383 (16384 columns)</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetCurrentRowNumber(System.Int32)">
            <summary>
            Sets the current row number (zero based)
            </summary>
            <param name="rowNumber">Row number (zero based)</param>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the number is out of the valid range. Range is from 0 to 1048575 (1048576 rows)</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetSelectedCells(PicoXLSX.Cell.Range)">
            <summary>
            Sets the selected cells on this worksheet
            </summary>
            <param name="range">Cell range to select</param>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetSelectedCells(PicoXLSX.Cell.Address,PicoXLSX.Cell.Address)">
            <summary>
            Sets the selected cells on this worksheet
            </summary>
            <param name="startAddress">Start address of the range</param>
            <param name="endAddress">End address of the range</param>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetSelectedCells(System.String)">
            <summary>
            Sets the selected cells on this worksheet
            </summary>
            <param name="range">Cell range to select</param>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetSheetProtectionPassword(System.String)">
            <summary>
            Sets or removes the password for worksheet protection. If set, UseSheetProtection will be also set to true
            </summary>
            <param name="password">Password (UTF-8) to protect the worksheet. If the password is null or empty, no password will be used</param>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetRowHeight(System.Int32,System.Single)">
            <summary>
            Sets the height of the passed row number (zero-based)
            </summary>
            <param name="rowNumber">Row number (zero-based, 0 to 1048575)</param>
            <param name="height">Height from 0 to 409.5</param>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException:<br></br>a) If the passed row number is out of range<br></br>b) if the row height is out of range (0 - 409.5)</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetRowHiddenState(System.Int32,System.Boolean)">
            <summary>
            Sets the defined row as hidden or visible
            </summary>
            <param name="rowNumber">Row number to make visible again</param>
            <param name="state">If true, the row will be hidden, otherwise visible</param>
            <exception cref="T:PicoXLSX.RangeException">Throws an RangeException if the passed row number was out of range</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetSheetname(System.String)">
            <summary>
            Validates and sets the worksheet name
            </summary>
            <param name="name">Name to set</param>
            <exception cref="T:PicoXLSX.FormatException">Throws a FormatException if the sheet name is too long (max. 31) or contains illegal characters [  ]  * ? / \</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SetSheetName(System.String,System.Boolean)">
            <summary>
            Sets the name of the sheet
            </summary>
            <param name="name">Name of the sheet</param>
            <param name="sanitize">If true, the filename will be sanitized automatically according to the specifications of Excel</param>
            <exception cref="T:PicoXLSX.WorksheetException">WorksheetException Thrown if no workbook is referenced. This information is necessary to determine whether the name already exists</exception>
        </member>
        <member name="M:PicoXLSX.Worksheet.SanitizeWorksheetName(System.String,PicoXLSX.Workbook)">
            <summary>
            Sanitizes a worksheet name
            </summary>
            <param name="input">Name to sanitize</param>
            <param name="workbook">Workbook reference</param>
            <returns>Name of the sanitized worksheet</returns>
        </member>
        <member name="M:PicoXLSX.Worksheet.WorksheetExists(System.String,PicoXLSX.Workbook)">
            <summary>
            Checks whether a worksheet with the given name exists
            </summary>
            <param name="name">Name to check</param>
            <param name="workbook">Workbook reference</param>
            <returns>True if the name exits, otherwise false</returns>
        </member>
        <member name="T:PicoXLSX.Worksheet.Column">
            <summary>
            Class representing a column of a worksheet
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.Column.ColumnAddress">
            <summary>
            Column address (A to XFD)
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.Column.HasAutoFilter">
            <summary>
            If true, the column has auto filter applied, otherwise not
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.Column.IsHidden">
            <summary>
            If true, the column is hidden, otherwise visible
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.Column.Number">
            <summary>
            Column number (0 to 16383)
            </summary>
        </member>
        <member name="P:PicoXLSX.Worksheet.Column.Width">
            <summary>
            Width of the column
            </summary>
        </member>
        <member name="M:PicoXLSX.Worksheet.Column.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PicoXLSX.Worksheet.Column.#ctor(System.Int32)">
            <summary>
            Constructor with column number
            </summary>
            <param name="columnCoordinate">Column number (zero-based, 0 to 16383)</param>
        </member>
        <member name="M:PicoXLSX.Worksheet.Column.#ctor(System.String)">
            <summary>
            Constructor with column address
            </summary>
            <param name="columnAddress">Column address (A to XFD)</param>
        </member>
    </members>
</doc>
